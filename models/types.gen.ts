// This file is auto-generated by @hey-api/openapi-ts

/**
 * Enum for a person's age range.
 */
export type AgeRangeEnum = 'adult' | 'teenager' | 'child' | 'toddler';

/**
 * Enum for a person's age range.
 */
export const AgeRangeEnum = {
    ADULT: 'adult',
    TEENAGER: 'teenager',
    CHILD: 'child',
    TODDLER: 'toddler'
} as const;

export type Battery = {
    brand: string;
    model: string;
    tachnology: BatteryTypeEnum;
    id: number;
};

export type BatteryTypeEnum = 'acid' | 'lithium';

export const BatteryTypeEnum = {
    ACID: 'acid',
    LITHIUM: 'lithium'
} as const;

export type Country = {
    code: string;
    name: string;
    currency: string;
};

/**
 * Enum for currencies.
 */
export type CurrencyEnum = 'EUR' | 'GBP' | 'RUB' | 'USD' | 'YEN';

/**
 * Enum for currencies.
 */
export const CurrencyEnum = {
    EUR: 'EUR',
    GBP: 'GBP',
    RUB: 'RUB',
    USD: 'USD',
    YEN: 'YEN'
} as const;

export type Customer = {
    email?: string;
    email_verified?: boolean;
    sub?: (string | null);
    given_name?: string;
    family_name?: string;
    middle_name?: string;
    nickname?: string;
    date_of_birth?: string;
    gender?: GenderEnum;
    picture?: string;
    password?: string;
    uid: string;
    active?: boolean;
    role: Role;
    country: (Country | null);
    websites: Array<Website>;
    emails: Array<Email>;
    phone_numbers: Array<PhoneNumber>;
    reservations: Array<Reservation>;
};

export type CustomerCreate = {
    websites?: Array<Website>;
    emails?: Array<Email>;
    phone_numbers?: Array<PhoneNumber>;
    email?: string;
    email_verified?: boolean;
    sub?: (string | null);
    given_name?: string;
    family_name?: string;
    middle_name?: string;
    nickname?: string;
    date_of_birth?: string;
    gender?: GenderEnum;
    picture?: string;
    password?: string;
    age_range?: AgeRangeEnum;
};

export type CustomerUpdate = {
    websites?: Array<Website>;
    emails?: Array<Email>;
    phone_numbers?: Array<PhoneNumber>;
    email?: string;
    email_verified?: boolean;
    sub?: (string | null);
    given_name?: string;
    family_name?: string;
    middle_name?: string;
    nickname?: string;
    date_of_birth?: string;
    gender?: GenderEnum;
    picture?: string;
    password?: string;
    role_name?: RolesEnum;
    refresh_token_uid?: string;
    active?: boolean;
};

/**
 * Pydantic schema for user email addresses.
 */
export type Email = {
    name?: string;
    value?: string;
};

/**
 * Pydantic schema for get Employee.
 */
export type Employee = {
    email?: string;
    email_verified?: boolean;
    sub?: (string | null);
    given_name?: string;
    family_name?: string;
    middle_name?: string;
    nickname?: string;
    date_of_birth?: string;
    gender?: GenderEnum;
    picture?: string;
    password?: string;
    skills?: Array<SkillsEnum>;
    uid: string;
    active?: boolean;
    role: Role;
    country: (Country | null);
    websites: Array<Website>;
    emails: Array<Email>;
    phone_numbers: Array<PhoneNumber>;
    spoken_languages: Array<Language>;
    tours: Array<TourWithoutAssignments>;
    stops: Array<Stop>;
};

/**
 * Pydantic schema for creation of Employee.
 */
export type EmployeeCreate = {
    websites?: Array<Website>;
    emails?: Array<Email>;
    phone_numbers?: Array<PhoneNumber>;
    email?: string;
    email_verified?: boolean;
    sub?: (string | null);
    given_name?: string;
    family_name?: string;
    middle_name?: string;
    nickname?: string;
    date_of_birth?: string;
    gender?: GenderEnum;
    picture?: string;
    password?: string;
    skills?: Array<SkillsEnum>;
    role?: RolesEnum;
    spoken_languages_codes?: Array<(string)>;
};

/**
 * Pydantic schema for Employee ID.
 */
export type EmployeeORM = {
    email?: string;
    email_verified?: boolean;
    sub?: (string | null);
    given_name?: string;
    family_name?: string;
    middle_name?: string;
    nickname?: string;
    date_of_birth?: string;
    gender?: GenderEnum;
    picture?: string;
    password?: string;
    skills?: Array<SkillsEnum>;
    uid: string;
    active?: boolean;
    role: Role;
    country: (Country | null);
    websites: Array<Website>;
    emails: Array<Email>;
    phone_numbers: Array<PhoneNumber>;
    spoken_languages: Array<Language>;
};

/**
 * Pydantic schema for list Employee.
 */
export type EmployeesList = {
    employees: Array<Employee>;
};

/**
 * Pydantic schema for updates on Employee.
 */
export type EmployeeUpdate = {
    websites?: Array<Website>;
    emails?: Array<Email>;
    phone_numbers?: Array<PhoneNumber>;
    email?: string;
    email_verified?: boolean;
    sub?: (string | null);
    given_name?: string;
    family_name?: string;
    middle_name?: string;
    nickname?: string;
    date_of_birth?: string;
    gender?: GenderEnum;
    picture?: string;
    password?: string;
    role_name?: RolesEnum;
    refresh_token_uid?: string;
    active?: boolean;
    spoken_languages?: Array<Language>;
    skills?: Array<SkillsEnum>;
};

export type GenderEnum = 'male' | 'female' | 'other' | 'unknown';

export const GenderEnum = {
    MALE: 'male',
    FEMALE: 'female',
    OTHER: 'other',
    UNKNOWN: 'unknown'
} as const;

export type HTTPValidationError = {
    detail?: Array<ValidationError>;
};

/**
 * Pydantic schema for languages get requests.
 */
export type Language = {
    name: string;
    code: string;
};

/**
 * Pydantic schema for language list.
 */
export type Languages = {
    languages: Array<Language>;
};

export type ListReservationFiltersEnum = 'valid' | 'canceled' | 'completed' | 'incomplete';

export const ListReservationFiltersEnum = {
    VALID: 'valid',
    CANCELED: 'canceled',
    COMPLETED: 'completed',
    INCOMPLETE: 'incomplete'
} as const;

export type Permission = {
    name: PermissionsEnum;
};

export type PermissionsEnum = 'reservation.view' | 'reservation.edit' | 'reservationPrice.view' | 'vehicle.view' | 'vehicle.edit' | 'vehicle.delete' | 'vehicleStop.view' | 'vehicleStop.edit' | 'employee.view' | 'employee.edit' | 'employee.delete' | 'employeeStop.view' | 'employeeStop.edit' | 'tourAgent.view' | 'tourAgent.edit' | 'tourAgent.delete' | 'service.view' | 'service.edit' | 'service.delete' | 'serviceType.view' | 'serviceType.edit' | 'serviceType.delete';

export const PermissionsEnum = {
    RESERVATION_VIEW: 'reservation.view',
    RESERVATION_EDIT: 'reservation.edit',
    RESERVATION_PRICE_VIEW: 'reservationPrice.view',
    VEHICLE_VIEW: 'vehicle.view',
    VEHICLE_EDIT: 'vehicle.edit',
    VEHICLE_DELETE: 'vehicle.delete',
    VEHICLE_STOP_VIEW: 'vehicleStop.view',
    VEHICLE_STOP_EDIT: 'vehicleStop.edit',
    EMPLOYEE_VIEW: 'employee.view',
    EMPLOYEE_EDIT: 'employee.edit',
    EMPLOYEE_DELETE: 'employee.delete',
    EMPLOYEE_STOP_VIEW: 'employeeStop.view',
    EMPLOYEE_STOP_EDIT: 'employeeStop.edit',
    TOUR_AGENT_VIEW: 'tourAgent.view',
    TOUR_AGENT_EDIT: 'tourAgent.edit',
    TOUR_AGENT_DELETE: 'tourAgent.delete',
    SERVICE_VIEW: 'service.view',
    SERVICE_EDIT: 'service.edit',
    SERVICE_DELETE: 'service.delete',
    SERVICE_TYPE_VIEW: 'serviceType.view',
    SERVICE_TYPE_EDIT: 'serviceType.edit',
    SERVICE_TYPE_DELETE: 'serviceType.delete'
} as const;

/**
 * Pydantic model for user phone numbers.
 */
export type PhoneNumber = {
    name?: string;
    value?: string;
};

export type RefreshToken = {
    refresh_token: string;
};

/**
 * Pydantic schema for get requests on reservations.
 */
export type Reservation = {
    name: string;
    language: Language;
    price_value: number;
    price_currency?: CurrencyEnum;
    payment_info?: string;
    paid?: boolean;
    note?: string;
    locked?: boolean;
    canceled?: boolean;
    id: number;
    booking_number: number;
    booking_serial: string;
    year: number;
    tour_agent?: TourAgent;
    created: string;
    updated?: string;
    tour_days: Array<TourDayWithoutReservation>;
    participants: Array<Customer>;
};

/**
 * Pydantic schema for reservation creation
 */
export type ReservationCreate = {
    name: string;
    language: Language;
    price_value: number;
    price_currency?: CurrencyEnum;
    payment_info?: string;
    paid?: boolean;
    note?: string;
    locked?: boolean;
    canceled?: boolean;
    year: number;
    tour_days: Array<TourDayCreate>;
    tour_agency_id?: number;
    participants: Array<CustomerCreate>;
};

export type ReservationList = {
    reservations: Array<Reservation>;
};

/**
 * Pydantic schema for reservation update.
 */
export type ReservationUpdate = {
    name?: string;
    tour_agent_id?: number;
    people?: Array<CustomerUpdate>;
    language_id?: number;
    price_value?: number;
    price_currency?: CurrencyEnum;
    payment_info?: string;
    payment_is_cash?: boolean;
    paid?: boolean;
    note?: string;
    locked?: boolean;
    canceled?: boolean;
};

/**
 * Pydantic schema for reservation with related people.
 */
export type ReservationWithParticipants = {
    name: string;
    language: Language;
    price_value: number;
    price_currency?: CurrencyEnum;
    payment_info?: string;
    paid?: boolean;
    note?: string;
    locked?: boolean;
    canceled?: boolean;
    id: number;
    booking_number: number;
    booking_serial: string;
    year: number;
    tour_agent?: TourAgent;
    created: string;
    updated?: string;
    participants: Array<Customer>;
};

export type Role = {
    name: RolesEnum;
    permissions: Array<Permission>;
};

export type RolesEnum = 'BASE' | 'CUSTOMER' | 'TOUR_AGENT' | 'ASSIGNEE' | 'BOOKING_OFFICER' | 'MGMT' | 'ADMIN';

export const RolesEnum = {
    BASE: 'BASE',
    CUSTOMER: 'CUSTOMER',
    TOUR_AGENT: 'TOUR_AGENT',
    ASSIGNEE: 'ASSIGNEE',
    BOOKING_OFFICER: 'BOOKING_OFFICER',
    MGMT: 'MGMT',
    ADMIN: 'ADMIN'
} as const;

/**
 * Pydantic schema for services GET request.
 */
export type Service = {
    code: string;
    name: string;
    description?: string;
    duration: number;
    preferred_am_start_time?: string;
    preferred_pm_start_time?: string;
    id: number;
    active?: boolean;
    service_type: ServiceTypeWithoutServices;
};

/**
 * Pydantic schema for service POST create request.
 */
export type ServiceCreate = {
    code: string;
    name: string;
    description?: string;
    duration: number;
    preferred_am_start_time?: string;
    preferred_pm_start_time?: string;
    service_type_id: number;
};

/**
 * Pydantic schema for services GET list request.
 */
export type ServiceList = {
    services: Array<Service>;
};

/**
 * Pydantic schema for service type GET request.
 */
export type ServiceType = {
    name: string;
    description?: string;
    id: number;
    services: Array<ServiceWithoutServiceType>;
};

/**
 * Pydantic schema for service type POST create request.
 */
export type ServiceTypeCreate = {
    name: string;
    description?: string;
};

/**
 * Pydantic schema for service type GET list request.
 */
export type ServiceTypeList = {
    service_types: Array<ServiceType>;
};

/**
 * Pydantic schema for service type PATCH update request.
 */
export type ServiceTypeUpdate = {
    name?: string;
    description?: string;
};

/**
 * Service type schema with no service relations.
 */
export type ServiceTypeWithoutServices = {
    name: string;
    description?: string;
    id: number;
};

/**
 * Pydantic schema for service PATCH update request.
 */
export type ServiceUpdate = {
    code?: string;
    name?: string;
    description?: string;
    duration?: number;
    preferred_am_start_time?: string;
    preferred_pm_start_time?: string;
    active?: boolean;
};

/**
 * Service schema without service type relation.
 */
export type ServiceWithoutServiceType = {
    code: string;
    name: string;
    description?: string;
    duration: number;
    preferred_am_start_time?: string;
    preferred_pm_start_time?: string;
    id: number;
    active?: boolean;
};

export type SkillsEnum = 'booking_officer' | 'local_guide' | 'van_driver' | 'driving_guide' | 'in_house_guide' | 'driver_only' | 'trainee';

export const SkillsEnum = {
    BOOKING_OFFICER: 'booking_officer',
    LOCAL_GUIDE: 'local_guide',
    VAN_DRIVER: 'van_driver',
    DRIVING_GUIDE: 'driving_guide',
    IN_HOUSE_GUIDE: 'in_house_guide',
    DRIVER_ONLY: 'driver_only',
    TRAINEE: 'trainee'
} as const;

/**
 * Pydantic schema for get cart stops requests.
 */
export type Stop = {
    type: StopTypeEnum;
    start_datetime: string;
    end_datetime: string;
    id: number;
    entity_id: string;
};

/**
 * Pydantic schema for creation of cart stops.
 */
export type StopCreate = {
    type: StopTypeEnum;
    start_datetime: string;
    end_datetime: string;
};

export type StopTypeEnum = 'holiday' | 'sick_leave' | 'damage' | 'detention';

export const StopTypeEnum = {
    HOLIDAY: 'holiday',
    SICK_LEAVE: 'sick_leave',
    DAMAGE: 'damage',
    DETENTION: 'detention'
} as const;

/**
 * Base pydantic driver stop update schema.
 */
export type StopUpdate = {
    type?: (StopTypeEnum | null);
    start_datetime?: (string | null);
    end_datetime?: (string | null);
};

export type Token = {
    token: string;
};

export type TokenResponse = {
    token: string;
    refresh_token: string;
};

/**
 * Pydantic schema for tour GET requests.
 */
export type Tour = {
    start_time: string;
    end_time: string;
    pickup?: string;
    dropoff?: string;
    id: number;
    service: Service;
    vehicles: Array<VehicleORM>;
    drivers: Array<EmployeeORM>;
};

export type TourAgenciesList = {
    tour_agencies: Array<TourAgencyWithAgents>;
};

export type TourAgency = {
    name: string;
    active?: boolean;
    id: number;
};

export type TourAgencyCreate = {
    name: string;
    active?: boolean;
};

export type TourAgencyWithAgents = {
    name: string;
    active?: boolean;
    id: number;
    tour_agents: Array<User>;
};

export type TourAgent = {
    email?: string;
    email_verified?: boolean;
    sub?: (string | null);
    given_name?: string;
    family_name?: string;
    middle_name?: string;
    nickname?: string;
    date_of_birth?: string;
    gender?: GenderEnum;
    picture?: string;
    password?: string;
    uid: string;
    active?: boolean;
    role: Role;
    country: (Country | null);
    websites: Array<Website>;
    emails: Array<Email>;
    phone_numbers: Array<PhoneNumber>;
    tour_agency: TourAgency;
    reservations: Array<Reservation>;
};

/**
 * Pydantic schema for creation of agents.
 */
export type TourAgentCreate = {
    websites?: Array<Website>;
    emails?: Array<Email>;
    phone_numbers?: Array<PhoneNumber>;
    email?: string;
    email_verified?: boolean;
    sub?: (string | null);
    given_name?: string;
    family_name?: string;
    middle_name?: string;
    nickname?: string;
    date_of_birth?: string;
    gender?: GenderEnum;
    picture?: string;
    password?: string;
    tour_agency_id: number;
};

/**
 * Pydantic schema for retrieving a list of agents.
 */
export type TourAgentList = {
    tour_agents: Array<TourAgent>;
};

export type TourAgentUpdate = {
    websites?: Array<Website>;
    emails?: Array<Email>;
    phone_numbers?: Array<PhoneNumber>;
    email?: string;
    email_verified?: boolean;
    sub?: (string | null);
    given_name?: string;
    family_name?: string;
    middle_name?: string;
    nickname?: string;
    date_of_birth?: string;
    gender?: GenderEnum;
    picture?: string;
    password?: string;
    role_name?: RolesEnum;
    refresh_token_uid?: string;
    active?: boolean;
    tour_agency_id?: number;
};

/**
 * Pydantic schema for tour POST create requests.
 */
export type TourCreate = {
    start_time: string;
    end_time: string;
    pickup?: string;
    dropoff?: string;
    service_id: number;
};

/**
 * Pydantic schema for tour day GET requests.
 */
export type TourDay = {
    tour_date: string;
    id: number;
    tours: Array<Tour>;
    previous_day_id?: number;
    next_day_id?: number;
    reservation: ReservationWithParticipants;
};

/**
 * Pydantic schema for tour day POST create requests.
 */
export type TourDayCreate = {
    tour_date: string;
    tours: Array<TourCreate>;
};

/**
 * Pydantic schema for tour day GET list requests.
 */
export type TourDayList = {
    tour_days: Array<TourDay>;
};

/**
 * Pydantic schema for count-by-filter endpoint.
 */
export type TourDaysCountByFilterSchema = {
    valid: number;
    canceled: number;
    completed: number;
    incomplete: number;
};

/**
 * Pydantic schema for tour day update requests.
 */
export type TourDayUpdate = {
    reservation?: ReservationUpdate;
    tour_date?: string;
    tours: Array<TourUpdate>;
};

/**
 * Tour day schema without reservation relation.
 */
export type TourDayWithoutReservation = {
    tour_date: string;
    id: number;
    tours: Array<Tour>;
    previous_day_id?: number;
    next_day_id?: number;
};

/**
 * Pydantic schema for tour PATCH update requests.
 */
export type TourUpdate = {
    id: number;
    start_time?: string;
    end_time?: string;
    service_id?: number;
    vehicles_plates?: Array<(string)>;
    drivers_uids?: Array<(string)>;
};

/**
 * Pydantic schema for tour without golf carts or drivers
 */
export type TourWithoutAssignments = {
    start_time: string;
    end_time: string;
    pickup?: string;
    dropoff?: string;
    id: number;
    service: Service;
};

export type User = {
    email?: string;
    email_verified?: boolean;
    sub?: (string | null);
    given_name?: string;
    family_name?: string;
    middle_name?: string;
    nickname?: string;
    date_of_birth?: string;
    gender?: GenderEnum;
    picture?: string;
    password?: string;
    uid: string;
    active?: boolean;
    role: Role;
    country: (Country | null);
    websites: Array<Website>;
    emails: Array<Email>;
    phone_numbers: Array<PhoneNumber>;
};

/**
 * Pydantic schema for user create.
 */
export type UserCreate = {
    websites?: Array<Website>;
    emails?: Array<Email>;
    phone_numbers?: Array<PhoneNumber>;
    email?: string;
    email_verified?: boolean;
    sub?: (string | null);
    given_name?: string;
    family_name?: string;
    middle_name?: string;
    nickname?: string;
    date_of_birth?: string;
    gender?: GenderEnum;
    picture?: string;
    password?: string;
};

/**
 * Special schema for returning refresh_token_uid with User.
 */
export type UserForToken = {
    email?: string;
    email_verified?: boolean;
    sub?: (string | null);
    given_name?: string;
    family_name?: string;
    middle_name?: string;
    nickname?: string;
    date_of_birth?: string;
    gender?: GenderEnum;
    picture?: string;
    password?: string;
    uid: string;
    active?: boolean;
    role: Role;
    country: (Country | null);
    websites: Array<Website>;
    emails: Array<Email>;
    phone_numbers: Array<PhoneNumber>;
    refresh_token_uid: string;
};

/**
 * Pydantic schema to list users.
 */
export type UserList = {
    users: Array<User>;
};

/**
 * Schema for login endpoints response
 */
export type UserWithTokens = {
    token: string;
    refresh_token: string;
    user: UserForToken;
};

export type ValidationError = {
    loc: Array<(string | number)>;
    msg: string;
    type: string;
};

/**
 * Pydantic schema for get vehicle.
 */
export type Vehicle = {
    type?: VehicleTypesEnum;
    brand?: string;
    model?: string;
    seats: number;
    picture?: string;
    active?: boolean;
    name?: string;
    plate: string;
    battery: Battery;
    tours: Array<Tour>;
    stops: Array<Stop>;
};

export type VehicleCreate = {
    type?: VehicleTypesEnum;
    brand?: string;
    model?: string;
    seats: number;
    picture?: string;
    active?: boolean;
    name?: string;
    plate: string;
    battery_id?: number;
};

export type VehicleList = {
    vehicles: Array<Vehicle>;
};

export type VehicleORM = {
    type?: VehicleTypesEnum;
    brand?: string;
    model?: string;
    seats: number;
    picture?: string;
    active?: boolean;
    name?: string;
    plate: string;
};

export type VehicleTypesEnum = 'generic' | 'van' | 'golf_cart';

export const VehicleTypesEnum = {
    GENERIC: 'generic',
    VAN: 'van',
    GOLF_CART: 'golf_cart'
} as const;

export type VehicleUpdate = {
    battery_id?: number;
    picture?: string;
    active?: boolean;
};

/**
 * Base pydantic model for user websites.
 */
export type Website = {
    name?: string;
    value?: string;
};

export type ListTourAgenciesApiV1TourAgentsTourAgenciesGetResponse = (TourAgenciesList);

export type ListTourAgenciesApiV1TourAgentsTourAgenciesGetError = (unknown);

export type CreateAgencyApiV1TourAgentsTourAgenciesPostData = {
    body: TourAgencyCreate;
};

export type CreateAgencyApiV1TourAgentsTourAgenciesPostResponse = (TourAgency);

export type CreateAgencyApiV1TourAgentsTourAgenciesPostError = (unknown | HTTPValidationError);

export type GetByIdApiV1TourAgentsTourAgenciesByIdTourAgencyIdGetData = {
    path: {
        tour_agency_id: number;
    };
};

export type GetByIdApiV1TourAgentsTourAgenciesByIdTourAgencyIdGetResponse = (TourAgency);

export type GetByIdApiV1TourAgentsTourAgenciesByIdTourAgencyIdGetError = (unknown | HTTPValidationError);

export type QueryTourAgenciesApiV1TourAgentsTourAgenciesSearchPostData = {
    body: string;
};

export type QueryTourAgenciesApiV1TourAgentsTourAgenciesSearchPostResponse = (TourAgenciesList);

export type QueryTourAgenciesApiV1TourAgentsTourAgenciesSearchPostError = (unknown | HTTPValidationError);

export type ListAgentsApiV1TourAgentsGetResponse = (TourAgentList);

export type ListAgentsApiV1TourAgentsGetError = (unknown);

export type CreateAgentApiV1TourAgentsPostData = {
    body: TourAgentCreate;
};

export type CreateAgentApiV1TourAgentsPostResponse = (TourAgent);

export type CreateAgentApiV1TourAgentsPostError = (unknown | HTTPValidationError);

export type QueryAgentsApiV1TourAgentsSearchPostData = {
    body: string;
};

export type QueryAgentsApiV1TourAgentsSearchPostResponse = (TourAgentList);

export type QueryAgentsApiV1TourAgentsSearchPostError = (unknown | HTTPValidationError);

export type GetAgentApiV1TourAgentsAgentUidGetData = {
    path: {
        agent_uid: string;
    };
};

export type GetAgentApiV1TourAgentsAgentUidGetResponse = (TourAgent);

export type GetAgentApiV1TourAgentsAgentUidGetError = (unknown | HTTPValidationError);

export type UpdateAgentApiV1TourAgentsAgentUidPatchData = {
    body: TourAgentUpdate;
    path: {
        agent_uid: string;
    };
};

export type UpdateAgentApiV1TourAgentsAgentUidPatchResponse = (TourAgent);

export type UpdateAgentApiV1TourAgentsAgentUidPatchError = (unknown | HTTPValidationError);

export type DeleteAgentApiV1TourAgentsAgentUidDeleteData = {
    path: {
        agent_uid: string;
    };
};

export type DeleteAgentApiV1TourAgentsAgentUidDeleteResponse = (unknown);

export type DeleteAgentApiV1TourAgentsAgentUidDeleteError = (unknown | HTTPValidationError);

export type ListStopsApiV1VehiclesStopsByPlatePlateGetData = {
    path: {
        plate: string;
    };
    query?: {
        end_datetime_from?: (string | null);
        end_datetime_to?: (string | null);
        filters?: Array<StopTypeEnum>;
        limit?: (number | null);
        start_datetime_from?: (string | null);
        start_datetime_to?: (string | null);
    };
};

export type ListStopsApiV1VehiclesStopsByPlatePlateGetResponse = (Array<Stop>);

export type ListStopsApiV1VehiclesStopsByPlatePlateGetError = (unknown | HTTPValidationError);

export type GetStopApiV1VehiclesStopsStopIdGetData = {
    path: {
        stop_id: number;
    };
};

export type GetStopApiV1VehiclesStopsStopIdGetResponse = (Stop);

export type GetStopApiV1VehiclesStopsStopIdGetError = (unknown | HTTPValidationError);

export type UpdateDriverStopApiV1VehiclesStopsStopIdPatchData = {
    body: StopUpdate;
    path: {
        stop_id: number;
    };
};

export type UpdateDriverStopApiV1VehiclesStopsStopIdPatchResponse = (Stop);

export type UpdateDriverStopApiV1VehiclesStopsStopIdPatchError = (unknown | HTTPValidationError);

export type DeleteDriverStopApiV1VehiclesStopsStopIdDeleteData = {
    path: {
        stop_id: number;
    };
};

export type DeleteDriverStopApiV1VehiclesStopsStopIdDeleteResponse = (unknown);

export type DeleteDriverStopApiV1VehiclesStopsStopIdDeleteError = (unknown | HTTPValidationError);

export type CreateDriverStopApiV1VehiclesStopsPostData = {
    body: StopCreate;
};

export type CreateDriverStopApiV1VehiclesStopsPostResponse = (Stop);

export type CreateDriverStopApiV1VehiclesStopsPostError = (unknown | HTTPValidationError);

export type ListVehiclesApiV1VehiclesGetResponse = (VehicleList);

export type ListVehiclesApiV1VehiclesGetError = (unknown);

export type CreateVehicleApiV1VehiclesPostData = {
    body: VehicleCreate;
};

export type CreateVehicleApiV1VehiclesPostResponse = (Vehicle);

export type CreateVehicleApiV1VehiclesPostError = (unknown | HTTPValidationError);

export type ListAvailableVehiclesApiV1VehiclesAvailableGetData = {
    query: {
        end: string;
        start: string;
        tour_date: string;
    };
};

export type ListAvailableVehiclesApiV1VehiclesAvailableGetResponse = (VehicleList);

export type ListAvailableVehiclesApiV1VehiclesAvailableGetError = (unknown | HTTPValidationError);

export type GetVehicleApiV1VehiclesPlateGetData = {
    path: {
        plate: string;
    };
};

export type GetVehicleApiV1VehiclesPlateGetResponse = (Vehicle);

export type GetVehicleApiV1VehiclesPlateGetError = (unknown | HTTPValidationError);

export type UpdateVehicleApiV1VehiclesPlatePatchData = {
    body: VehicleUpdate;
    path: {
        plate: string;
    };
};

export type UpdateVehicleApiV1VehiclesPlatePatchResponse = (Vehicle);

export type UpdateVehicleApiV1VehiclesPlatePatchError = (unknown | HTTPValidationError);

export type DeleteVehicleApiV1VehiclesPlateDeleteData = {
    path: {
        plate: string;
    };
};

export type DeleteVehicleApiV1VehiclesPlateDeleteResponse = (unknown);

export type DeleteVehicleApiV1VehiclesPlateDeleteError = (unknown | HTTPValidationError);

export type ListDriverStopsApiV1EmployeesStopsByDriverDriverUidGetData = {
    path: {
        driver_uid: string;
    };
    query?: {
        end_datetime_from?: (string | null);
        end_datetime_to?: (string | null);
        filters?: Array<StopTypeEnum>;
        limit?: (number | null);
        start_datetime_from?: (string | null);
        start_datetime_to?: (string | null);
    };
};

export type ListDriverStopsApiV1EmployeesStopsByDriverDriverUidGetResponse = (Array<Stop>);

export type ListDriverStopsApiV1EmployeesStopsByDriverDriverUidGetError = (unknown | HTTPValidationError);

export type GetStopApiV1EmployeesStopsStopIdGetData = {
    path: {
        stop_id: number;
    };
};

export type GetStopApiV1EmployeesStopsStopIdGetResponse = (Stop);

export type GetStopApiV1EmployeesStopsStopIdGetError = (unknown | HTTPValidationError);

export type UpdateDriverStopApiV1EmployeesStopsStopIdPatchData = {
    body: StopUpdate;
    path: {
        stop_id: number;
    };
};

export type UpdateDriverStopApiV1EmployeesStopsStopIdPatchResponse = (Stop);

export type UpdateDriverStopApiV1EmployeesStopsStopIdPatchError = (unknown | HTTPValidationError);

export type DeleteDriverStopApiV1EmployeesStopsStopIdDeleteData = {
    path: {
        stop_id: number;
    };
};

export type DeleteDriverStopApiV1EmployeesStopsStopIdDeleteResponse = (unknown);

export type DeleteDriverStopApiV1EmployeesStopsStopIdDeleteError = (unknown | HTTPValidationError);

export type CreateDriverStopApiV1EmployeesStopsPostData = {
    body: StopCreate;
};

export type CreateDriverStopApiV1EmployeesStopsPostResponse = (Stop);

export type CreateDriverStopApiV1EmployeesStopsPostError = (unknown | HTTPValidationError);

export type ListEmployeesApiV1EmployeesGetData = {
    query?: {
        active?: (boolean | null);
    };
};

export type ListEmployeesApiV1EmployeesGetResponse = (EmployeesList);

export type ListEmployeesApiV1EmployeesGetError = (unknown | HTTPValidationError);

export type CreateEmployeeApiV1EmployeesPostData = {
    body: EmployeeCreate;
};

export type CreateEmployeeApiV1EmployeesPostResponse = (Employee);

export type CreateEmployeeApiV1EmployeesPostError = (unknown | HTTPValidationError);

export type SearchEmployeesApiV1EmployeesSearchGetData = {
    query?: {
        q?: (string | null);
    };
};

export type SearchEmployeesApiV1EmployeesSearchGetResponse = (EmployeesList);

export type SearchEmployeesApiV1EmployeesSearchGetError = (unknown | HTTPValidationError);

export type ListAvailableEmployeesApiV1EmployeesAvailableGetData = {
    query: {
        end: string;
        language_code?: (string | null);
        start: string;
        tour_date: string;
    };
};

export type ListAvailableEmployeesApiV1EmployeesAvailableGetResponse = (EmployeesList);

export type ListAvailableEmployeesApiV1EmployeesAvailableGetError = (unknown | HTTPValidationError);

export type GetEmployeeApiV1EmployeesEmployeeUidGetData = {
    path: {
        employee_uid: string;
    };
};

export type GetEmployeeApiV1EmployeesEmployeeUidGetResponse = (Employee);

export type GetEmployeeApiV1EmployeesEmployeeUidGetError = (unknown | HTTPValidationError);

export type UpdateEmployeeApiV1EmployeesEmployeeUidPatchData = {
    body: EmployeeUpdate;
    path: {
        employee_uid: string;
    };
};

export type UpdateEmployeeApiV1EmployeesEmployeeUidPatchResponse = (Employee);

export type UpdateEmployeeApiV1EmployeesEmployeeUidPatchError = (unknown | HTTPValidationError);

export type DeleteEmployeeApiV1EmployeesEmployeeUidDeleteData = {
    path: {
        employee_uid: string;
    };
};

export type DeleteEmployeeApiV1EmployeesEmployeeUidDeleteResponse = (unknown);

export type DeleteEmployeeApiV1EmployeesEmployeeUidDeleteError = (unknown | HTTPValidationError);

export type LockTourDayApiV1ReservationsTourDaysLockTourDayIdPatchData = {
    path: {
        tour_day_id: number;
    };
    query: {
        value: boolean;
    };
};

export type LockTourDayApiV1ReservationsTourDaysLockTourDayIdPatchResponse = (unknown);

export type LockTourDayApiV1ReservationsTourDaysLockTourDayIdPatchError = (unknown | HTTPValidationError);

export type CancelApiV1ReservationsTourDaysCancelTourDayIdPatchData = {
    path: {
        tour_day_id: number;
    };
};

export type CancelApiV1ReservationsTourDaysCancelTourDayIdPatchResponse = (unknown);

export type CancelApiV1ReservationsTourDaysCancelTourDayIdPatchError = (unknown | HTTPValidationError);

export type GetTourDayApiV1ReservationsTourDaysTourDayIdGetData = {
    path: {
        tour_day_id: number;
    };
};

export type GetTourDayApiV1ReservationsTourDaysTourDayIdGetResponse = (TourDay);

export type GetTourDayApiV1ReservationsTourDaysTourDayIdGetError = (unknown | HTTPValidationError);

export type UpdateTourDayApiV1ReservationsTourDaysTourDayIdPatchData = {
    body: TourDayUpdate;
    path: {
        tour_day_id: number;
    };
};

export type UpdateTourDayApiV1ReservationsTourDaysTourDayIdPatchResponse = (unknown);

export type UpdateTourDayApiV1ReservationsTourDaysTourDayIdPatchError = (unknown | HTTPValidationError);

export type GetMultipleTourDaysApiV1ReservationsTourDaysMultipleTourDayIdGetData = {
    path: {
        tour_day_id: number;
    };
};

export type GetMultipleTourDaysApiV1ReservationsTourDaysMultipleTourDayIdGetResponse = (TourDayList);

export type GetMultipleTourDaysApiV1ReservationsTourDaysMultipleTourDayIdGetError = (unknown | HTTPValidationError);

export type CreateReservationApiV1ReservationsPostData = {
    body: ReservationCreate;
};

export type CreateReservationApiV1ReservationsPostResponse = (Reservation);

export type CreateReservationApiV1ReservationsPostError = (unknown | HTTPValidationError);

export type ListReservationsApiV1ReservationsGetData = {
    query: {
        year: number;
    };
};

export type ListReservationsApiV1ReservationsGetResponse = (ReservationList);

export type ListReservationsApiV1ReservationsGetError = (unknown | HTTPValidationError);

export type GetReservationsByDateApiV1ReservationsByDateTourDateGetData = {
    path: {
        tour_date: string;
    };
    query?: {
        filters?: Array<ListReservationFiltersEnum>;
    };
};

export type GetReservationsByDateApiV1ReservationsByDateTourDateGetResponse = (TourDayList);

export type GetReservationsByDateApiV1ReservationsByDateTourDateGetError = (unknown | HTTPValidationError);

export type GetCountByFilterApiV1ReservationsCountByFilterGetData = {
    query: {
        tour_date: string;
    };
};

export type GetCountByFilterApiV1ReservationsCountByFilterGetResponse = (TourDaysCountByFilterSchema);

export type GetCountByFilterApiV1ReservationsCountByFilterGetError = (unknown | HTTPValidationError);

export type GetReservationApiV1ReservationsReservationIdGetData = {
    path: {
        reservation_id: number;
    };
};

export type GetReservationApiV1ReservationsReservationIdGetResponse = (Reservation);

export type GetReservationApiV1ReservationsReservationIdGetError = (unknown | HTTPValidationError);

export type LockReservationApiV1ReservationsLockReservationIdPatchData = {
    path: {
        reservation_id: number;
    };
    query: {
        value: boolean;
    };
};

export type LockReservationApiV1ReservationsLockReservationIdPatchResponse = (Reservation);

export type LockReservationApiV1ReservationsLockReservationIdPatchError = (unknown | HTTPValidationError);

export type ListUsersApiV1UsersGetResponse = (UserList);

export type ListUsersApiV1UsersGetError = (unknown);

export type GetCurrentApiV1UsersCurrentGetResponse = (User);

export type GetCurrentApiV1UsersCurrentGetError = (unknown);

export type GetUserApiV1UsersSubGetData = {
    path: {
        sub: string;
    };
};

export type GetUserApiV1UsersSubGetResponse = (User);

export type GetUserApiV1UsersSubGetError = (unknown | HTTPValidationError);

export type ListServiceTypesApiV1ServicesTypesGetResponse = (ServiceTypeList);

export type ListServiceTypesApiV1ServicesTypesGetError = (unknown);

export type CreateServiceTypeApiV1ServicesTypesPostData = {
    body: ServiceTypeCreate;
};

export type CreateServiceTypeApiV1ServicesTypesPostResponse = (ServiceType);

export type CreateServiceTypeApiV1ServicesTypesPostError = (unknown | HTTPValidationError);

export type GetServiceTypeByIdApiV1ServicesTypesServiceTypeIdGetData = {
    path: {
        service_type_id: number;
    };
};

export type GetServiceTypeByIdApiV1ServicesTypesServiceTypeIdGetResponse = (ServiceType);

export type GetServiceTypeByIdApiV1ServicesTypesServiceTypeIdGetError = (unknown | HTTPValidationError);

export type UpdateServiceTypeApiV1ServicesTypesServiceTypeIdPatchData = {
    body: ServiceTypeUpdate;
    path: {
        service_type_id: number;
    };
};

export type UpdateServiceTypeApiV1ServicesTypesServiceTypeIdPatchResponse = (ServiceType);

export type UpdateServiceTypeApiV1ServicesTypesServiceTypeIdPatchError = (unknown | HTTPValidationError);

export type DeleteServiceTypeApiV1ServicesTypesServiceTypeIdDeleteData = {
    path: {
        service_type_id: number;
    };
};

export type DeleteServiceTypeApiV1ServicesTypesServiceTypeIdDeleteResponse = (unknown);

export type DeleteServiceTypeApiV1ServicesTypesServiceTypeIdDeleteError = (unknown | HTTPValidationError);

export type ListServicesApiV1ServicesGetResponse = (ServiceList);

export type ListServicesApiV1ServicesGetError = (unknown);

export type CreateServiceApiV1ServicesPostData = {
    body: ServiceCreate;
};

export type CreateServiceApiV1ServicesPostResponse = (Service);

export type CreateServiceApiV1ServicesPostError = (unknown | HTTPValidationError);

export type GetServiceByIdApiV1ServicesServiceIdGetData = {
    path: {
        service_id: number;
    };
};

export type GetServiceByIdApiV1ServicesServiceIdGetResponse = (Service);

export type GetServiceByIdApiV1ServicesServiceIdGetError = (unknown | HTTPValidationError);

export type UpdateServiceApiV1ServicesServiceIdPatchData = {
    body: ServiceUpdate;
    path: {
        service_id: number;
    };
};

export type UpdateServiceApiV1ServicesServiceIdPatchResponse = (Service);

export type UpdateServiceApiV1ServicesServiceIdPatchError = (unknown | HTTPValidationError);

export type DeleteServiceApiV1ServicesServiceIdDeleteData = {
    path: {
        service_id: number;
    };
};

export type DeleteServiceApiV1ServicesServiceIdDeleteResponse = (unknown);

export type DeleteServiceApiV1ServicesServiceIdDeleteError = (unknown | HTTPValidationError);

export type DeactivateServiceApiV1ServicesDeactivateServiceIdPatchData = {
    path: {
        service_id: number;
    };
};

export type DeactivateServiceApiV1ServicesDeactivateServiceIdPatchResponse = (Service);

export type DeactivateServiceApiV1ServicesDeactivateServiceIdPatchError = (unknown | HTTPValidationError);

export type LoginAuthLoginPostData = {
    query: {
        sub: string;
    };
};

export type LoginAuthLoginPostResponse = (UserWithTokens);

export type LoginAuthLoginPostError = (HTTPValidationError);

export type LoginWithGoogleAuthLoginWithGooglePostData = {
    body: Token;
};

export type LoginWithGoogleAuthLoginWithGooglePostResponse = (UserWithTokens);

export type LoginWithGoogleAuthLoginWithGooglePostError = (HTTPValidationError);

export type LogoutAuthLogoutPostResponse = (unknown);

export type LogoutAuthLogoutPostError = unknown;

export type RefreshTokenAuthRefreshTokenPostData = {
    body: RefreshToken;
};

export type RefreshTokenAuthRefreshTokenPostResponse = (TokenResponse);

export type RefreshTokenAuthRefreshTokenPostError = (HTTPValidationError);

export type GetCodeAuthGetCodePostData = {
    body: {
        [key: string]: unknown;
    };
};

export type GetCodeAuthGetCodePostResponse = ('OK');

export type GetCodeAuthGetCodePostError = (HTTPValidationError);

export type CreateUserAuthPostData = {
    body: UserCreate;
};

export type CreateUserAuthPostResponse = (User);

export type CreateUserAuthPostError = (HTTPValidationError);

export type ListLanguagesLanguagesGetResponse = (Languages);

export type ListLanguagesLanguagesGetError = unknown;

export type GetLanguageByCodeLanguagesByCodeLanguageCodeGetData = {
    path: {
        language_code: string;
    };
};

export type GetLanguageByCodeLanguagesByCodeLanguageCodeGetResponse = (Language);

export type GetLanguageByCodeLanguagesByCodeLanguageCodeGetError = (HTTPValidationError);

export type PingGetResponse = ('pong');

export type PingGetError = unknown;