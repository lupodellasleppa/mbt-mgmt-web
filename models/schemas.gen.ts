// This file is auto-generated by @hey-api/openapi-ts

export const AgeRangeEnumSchema = {
    type: 'string',
    enum: ['adult', 'teenager', 'child', 'toddler'],
    title: 'AgeRangeEnum',
    description: "Enum for a person's age range."
} as const;

export const BatterySchema = {
    properties: {
        brand: {
            type: 'string',
            title: 'Brand'
        },
        model: {
            type: 'string',
            title: 'Model'
        },
        tachnology: {
            '$ref': '#/components/schemas/BatteryTypeEnum'
        },
        id: {
            type: 'integer',
            title: 'Id'
        }
    },
    type: 'object',
    required: ['brand', 'model', 'tachnology', 'id'],
    title: 'Battery'
} as const;

export const BatteryTypeEnumSchema = {
    type: 'string',
    enum: ['acid', 'lithium'],
    title: 'BatteryTypeEnum'
} as const;

export const CountrySchema = {
    properties: {
        code: {
            type: 'string',
            title: 'Code'
        },
        name: {
            type: 'string',
            title: 'Name'
        },
        currency: {
            type: 'string',
            title: 'Currency'
        }
    },
    type: 'object',
    required: ['code', 'name', 'currency'],
    title: 'Country'
} as const;

export const CurrencyEnumSchema = {
    type: 'string',
    enum: ['EUR', 'GBP', 'RUB', 'USD', 'YEN'],
    title: 'CurrencyEnum',
    description: 'Enum for currencies.'
} as const;

export const CustomerSchema = {
    properties: {
        email: {
            type: 'string',
            format: 'email',
            title: 'Email'
        },
        email_verified: {
            type: 'boolean',
            title: 'Email Verified',
            default: false
        },
        sub: {
            anyOf: [
                {
                    type: 'string'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Sub'
        },
        given_name: {
            type: 'string',
            title: 'Given Name'
        },
        family_name: {
            type: 'string',
            title: 'Family Name'
        },
        middle_name: {
            type: 'string',
            title: 'Middle Name'
        },
        nickname: {
            type: 'string',
            title: 'Nickname'
        },
        date_of_birth: {
            type: 'string',
            format: 'date',
            title: 'Date Of Birth'
        },
        gender: {
            '$ref': '#/components/schemas/GenderEnum',
            default: 'unknown'
        },
        picture: {
            type: 'string',
            title: 'Picture'
        },
        password: {
            type: 'string',
            format: 'password',
            title: 'Password',
            writeOnly: true
        },
        uid: {
            type: 'string',
            format: 'uuid',
            title: 'Uid'
        },
        active: {
            type: 'boolean',
            title: 'Active',
            default: true
        },
        role: {
            '$ref': '#/components/schemas/Role'
        },
        country: {
            anyOf: [
                {
                    '$ref': '#/components/schemas/Country'
                },
                {
                    type: 'null'
                }
            ]
        },
        websites: {
            items: {
                '$ref': '#/components/schemas/Website'
            },
            type: 'array',
            title: 'Websites'
        },
        emails: {
            items: {
                '$ref': '#/components/schemas/Email'
            },
            type: 'array',
            title: 'Emails'
        },
        phone_numbers: {
            items: {
                '$ref': '#/components/schemas/PhoneNumber'
            },
            type: 'array',
            title: 'Phone Numbers'
        },
        reservations: {
            items: {
                '$ref': '#/components/schemas/Reservation'
            },
            type: 'array',
            title: 'Reservations'
        }
    },
    type: 'object',
    required: ['uid', 'role', 'country', 'websites', 'emails', 'phone_numbers', 'reservations'],
    title: 'Customer'
} as const;

export const CustomerCreateSchema = {
    properties: {
        websites: {
            items: {
                '$ref': '#/components/schemas/Website'
            },
            type: 'array',
            title: 'Websites',
            default: []
        },
        emails: {
            items: {
                '$ref': '#/components/schemas/Email'
            },
            type: 'array',
            title: 'Emails',
            default: []
        },
        phone_numbers: {
            items: {
                '$ref': '#/components/schemas/PhoneNumber'
            },
            type: 'array',
            title: 'Phone Numbers',
            default: []
        },
        email: {
            type: 'string',
            format: 'email',
            title: 'Email'
        },
        email_verified: {
            type: 'boolean',
            title: 'Email Verified',
            default: false
        },
        sub: {
            anyOf: [
                {
                    type: 'string'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Sub'
        },
        given_name: {
            type: 'string',
            title: 'Given Name'
        },
        family_name: {
            type: 'string',
            title: 'Family Name'
        },
        middle_name: {
            type: 'string',
            title: 'Middle Name'
        },
        nickname: {
            type: 'string',
            title: 'Nickname'
        },
        date_of_birth: {
            type: 'string',
            format: 'date',
            title: 'Date Of Birth'
        },
        gender: {
            '$ref': '#/components/schemas/GenderEnum',
            default: 'unknown'
        },
        picture: {
            type: 'string',
            title: 'Picture'
        },
        password: {
            type: 'string',
            format: 'password',
            title: 'Password',
            writeOnly: true
        },
        age_range: {
            '$ref': '#/components/schemas/AgeRangeEnum',
            default: 'adult'
        }
    },
    type: 'object',
    title: 'CustomerCreate'
} as const;

export const CustomerUpdateSchema = {
    properties: {
        websites: {
            items: {
                '$ref': '#/components/schemas/Website'
            },
            type: 'array',
            title: 'Websites',
            default: []
        },
        emails: {
            items: {
                '$ref': '#/components/schemas/Email'
            },
            type: 'array',
            title: 'Emails',
            default: []
        },
        phone_numbers: {
            items: {
                '$ref': '#/components/schemas/PhoneNumber'
            },
            type: 'array',
            title: 'Phone Numbers',
            default: []
        },
        email: {
            type: 'string',
            format: 'email',
            title: 'Email'
        },
        email_verified: {
            type: 'boolean',
            title: 'Email Verified',
            default: false
        },
        sub: {
            anyOf: [
                {
                    type: 'string'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Sub'
        },
        given_name: {
            type: 'string',
            title: 'Given Name'
        },
        family_name: {
            type: 'string',
            title: 'Family Name'
        },
        middle_name: {
            type: 'string',
            title: 'Middle Name'
        },
        nickname: {
            type: 'string',
            title: 'Nickname'
        },
        date_of_birth: {
            type: 'string',
            format: 'date',
            title: 'Date Of Birth'
        },
        gender: {
            '$ref': '#/components/schemas/GenderEnum',
            default: 'unknown'
        },
        picture: {
            type: 'string',
            title: 'Picture'
        },
        password: {
            type: 'string',
            format: 'password',
            title: 'Password',
            writeOnly: true
        },
        role_name: {
            '$ref': '#/components/schemas/RolesEnum',
            title: 'Role Name'
        },
        refresh_token_uid: {
            type: 'string',
            title: 'Refresh Token Uid'
        },
        active: {
            type: 'boolean',
            title: 'Active'
        }
    },
    type: 'object',
    title: 'CustomerUpdate'
} as const;

export const EmailSchema = {
    properties: {
        name: {
            type: 'string',
            title: 'Name',
            default: 'default'
        },
        value: {
            type: 'string',
            format: 'email',
            title: 'Value'
        }
    },
    type: 'object',
    title: 'Email',
    description: 'Pydantic schema for user email addresses.'
} as const;

export const EmployeeSchema = {
    properties: {
        email: {
            type: 'string',
            format: 'email',
            title: 'Email'
        },
        email_verified: {
            type: 'boolean',
            title: 'Email Verified',
            default: false
        },
        sub: {
            anyOf: [
                {
                    type: 'string'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Sub'
        },
        given_name: {
            type: 'string',
            title: 'Given Name'
        },
        family_name: {
            type: 'string',
            title: 'Family Name'
        },
        middle_name: {
            type: 'string',
            title: 'Middle Name'
        },
        nickname: {
            type: 'string',
            title: 'Nickname'
        },
        date_of_birth: {
            type: 'string',
            format: 'date',
            title: 'Date Of Birth'
        },
        gender: {
            '$ref': '#/components/schemas/GenderEnum',
            default: 'unknown'
        },
        picture: {
            type: 'string',
            title: 'Picture'
        },
        password: {
            type: 'string',
            format: 'password',
            title: 'Password',
            writeOnly: true
        },
        skills: {
            items: {
                '$ref': '#/components/schemas/SkillsEnum'
            },
            type: 'array',
            title: 'Skills',
            default: []
        },
        uid: {
            type: 'string',
            format: 'uuid',
            title: 'Uid'
        },
        active: {
            type: 'boolean',
            title: 'Active',
            default: true
        },
        role: {
            '$ref': '#/components/schemas/Role'
        },
        country: {
            anyOf: [
                {
                    '$ref': '#/components/schemas/Country'
                },
                {
                    type: 'null'
                }
            ]
        },
        websites: {
            items: {
                '$ref': '#/components/schemas/Website'
            },
            type: 'array',
            title: 'Websites'
        },
        emails: {
            items: {
                '$ref': '#/components/schemas/Email'
            },
            type: 'array',
            title: 'Emails'
        },
        phone_numbers: {
            items: {
                '$ref': '#/components/schemas/PhoneNumber'
            },
            type: 'array',
            title: 'Phone Numbers'
        },
        spoken_languages: {
            items: {
                '$ref': '#/components/schemas/Language'
            },
            type: 'array',
            title: 'Spoken Languages'
        },
        tours: {
            items: {
                '$ref': '#/components/schemas/TourWithoutAssignments'
            },
            type: 'array',
            title: 'Tours'
        },
        stops: {
            items: {
                '$ref': '#/components/schemas/Stop'
            },
            type: 'array',
            title: 'Stops'
        }
    },
    type: 'object',
    required: ['uid', 'role', 'country', 'websites', 'emails', 'phone_numbers', 'spoken_languages', 'tours', 'stops'],
    title: 'Employee',
    description: 'Pydantic schema for get Employee.'
} as const;

export const EmployeeCreateSchema = {
    properties: {
        websites: {
            items: {
                '$ref': '#/components/schemas/Website'
            },
            type: 'array',
            title: 'Websites',
            default: []
        },
        emails: {
            items: {
                '$ref': '#/components/schemas/Email'
            },
            type: 'array',
            title: 'Emails',
            default: []
        },
        phone_numbers: {
            items: {
                '$ref': '#/components/schemas/PhoneNumber'
            },
            type: 'array',
            title: 'Phone Numbers',
            default: []
        },
        email: {
            type: 'string',
            format: 'email',
            title: 'Email'
        },
        email_verified: {
            type: 'boolean',
            title: 'Email Verified',
            default: false
        },
        sub: {
            anyOf: [
                {
                    type: 'string'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Sub'
        },
        given_name: {
            type: 'string',
            title: 'Given Name'
        },
        family_name: {
            type: 'string',
            title: 'Family Name'
        },
        middle_name: {
            type: 'string',
            title: 'Middle Name'
        },
        nickname: {
            type: 'string',
            title: 'Nickname'
        },
        date_of_birth: {
            type: 'string',
            format: 'date',
            title: 'Date Of Birth'
        },
        gender: {
            '$ref': '#/components/schemas/GenderEnum',
            default: 'unknown'
        },
        picture: {
            type: 'string',
            title: 'Picture'
        },
        password: {
            type: 'string',
            format: 'password',
            title: 'Password',
            writeOnly: true
        },
        skills: {
            items: {
                '$ref': '#/components/schemas/SkillsEnum'
            },
            type: 'array',
            title: 'Skills',
            default: []
        },
        role: {
            '$ref': '#/components/schemas/RolesEnum',
            default: 'BASE'
        },
        spoken_languages_codes: {
            items: {
                type: 'string'
            },
            type: 'array',
            title: 'Spoken Languages Codes',
            default: []
        }
    },
    type: 'object',
    title: 'EmployeeCreate',
    description: 'Pydantic schema for creation of Employee.'
} as const;

export const EmployeeORMSchema = {
    properties: {
        email: {
            type: 'string',
            format: 'email',
            title: 'Email'
        },
        email_verified: {
            type: 'boolean',
            title: 'Email Verified',
            default: false
        },
        sub: {
            anyOf: [
                {
                    type: 'string'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Sub'
        },
        given_name: {
            type: 'string',
            title: 'Given Name'
        },
        family_name: {
            type: 'string',
            title: 'Family Name'
        },
        middle_name: {
            type: 'string',
            title: 'Middle Name'
        },
        nickname: {
            type: 'string',
            title: 'Nickname'
        },
        date_of_birth: {
            type: 'string',
            format: 'date',
            title: 'Date Of Birth'
        },
        gender: {
            '$ref': '#/components/schemas/GenderEnum',
            default: 'unknown'
        },
        picture: {
            type: 'string',
            title: 'Picture'
        },
        password: {
            type: 'string',
            format: 'password',
            title: 'Password',
            writeOnly: true
        },
        skills: {
            items: {
                '$ref': '#/components/schemas/SkillsEnum'
            },
            type: 'array',
            title: 'Skills',
            default: []
        },
        uid: {
            type: 'string',
            format: 'uuid',
            title: 'Uid'
        },
        active: {
            type: 'boolean',
            title: 'Active',
            default: true
        },
        role: {
            '$ref': '#/components/schemas/Role'
        },
        country: {
            anyOf: [
                {
                    '$ref': '#/components/schemas/Country'
                },
                {
                    type: 'null'
                }
            ]
        },
        websites: {
            items: {
                '$ref': '#/components/schemas/Website'
            },
            type: 'array',
            title: 'Websites'
        },
        emails: {
            items: {
                '$ref': '#/components/schemas/Email'
            },
            type: 'array',
            title: 'Emails'
        },
        phone_numbers: {
            items: {
                '$ref': '#/components/schemas/PhoneNumber'
            },
            type: 'array',
            title: 'Phone Numbers'
        },
        spoken_languages: {
            items: {
                '$ref': '#/components/schemas/Language'
            },
            type: 'array',
            title: 'Spoken Languages'
        }
    },
    type: 'object',
    required: ['uid', 'role', 'country', 'websites', 'emails', 'phone_numbers', 'spoken_languages'],
    title: 'EmployeeORM',
    description: 'Pydantic schema for Employee ID.'
} as const;

export const EmployeeUpdateSchema = {
    properties: {
        websites: {
            items: {
                '$ref': '#/components/schemas/Website'
            },
            type: 'array',
            title: 'Websites',
            default: []
        },
        emails: {
            items: {
                '$ref': '#/components/schemas/Email'
            },
            type: 'array',
            title: 'Emails',
            default: []
        },
        phone_numbers: {
            items: {
                '$ref': '#/components/schemas/PhoneNumber'
            },
            type: 'array',
            title: 'Phone Numbers',
            default: []
        },
        email: {
            type: 'string',
            format: 'email',
            title: 'Email'
        },
        email_verified: {
            type: 'boolean',
            title: 'Email Verified',
            default: false
        },
        sub: {
            anyOf: [
                {
                    type: 'string'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Sub'
        },
        given_name: {
            type: 'string',
            title: 'Given Name'
        },
        family_name: {
            type: 'string',
            title: 'Family Name'
        },
        middle_name: {
            type: 'string',
            title: 'Middle Name'
        },
        nickname: {
            type: 'string',
            title: 'Nickname'
        },
        date_of_birth: {
            type: 'string',
            format: 'date',
            title: 'Date Of Birth'
        },
        gender: {
            '$ref': '#/components/schemas/GenderEnum',
            default: 'unknown'
        },
        picture: {
            type: 'string',
            title: 'Picture'
        },
        password: {
            type: 'string',
            format: 'password',
            title: 'Password',
            writeOnly: true
        },
        role_name: {
            '$ref': '#/components/schemas/RolesEnum',
            title: 'Role Name'
        },
        refresh_token_uid: {
            type: 'string',
            title: 'Refresh Token Uid'
        },
        active: {
            type: 'boolean',
            title: 'Active'
        },
        spoken_languages: {
            items: {
                '$ref': '#/components/schemas/Language'
            },
            type: 'array',
            title: 'Spoken Languages',
            default: []
        },
        skills: {
            items: {
                '$ref': '#/components/schemas/SkillsEnum'
            },
            type: 'array',
            title: 'Skills',
            default: []
        }
    },
    type: 'object',
    title: 'EmployeeUpdate',
    description: 'Pydantic schema for updates on Employee.'
} as const;

export const EmployeesListSchema = {
    properties: {
        employees: {
            items: {
                '$ref': '#/components/schemas/Employee'
            },
            type: 'array',
            title: 'Employees'
        }
    },
    type: 'object',
    required: ['employees'],
    title: 'EmployeesList',
    description: 'Pydantic schema for list Employee.'
} as const;

export const GenderEnumSchema = {
    type: 'string',
    enum: ['male', 'female', 'other', 'unknown'],
    title: 'GenderEnum'
} as const;

export const HTTPValidationErrorSchema = {
    properties: {
        detail: {
            items: {
                '$ref': '#/components/schemas/ValidationError'
            },
            type: 'array',
            title: 'Detail'
        }
    },
    type: 'object',
    title: 'HTTPValidationError'
} as const;

export const LanguageSchema = {
    properties: {
        name: {
            type: 'string',
            title: 'Name'
        },
        code: {
            type: 'string',
            title: 'Code'
        }
    },
    type: 'object',
    required: ['name', 'code'],
    title: 'Language',
    description: 'Pydantic schema for languages get requests.'
} as const;

export const LanguagesSchema = {
    properties: {
        languages: {
            items: {
                '$ref': '#/components/schemas/Language'
            },
            type: 'array',
            title: 'Languages'
        }
    },
    type: 'object',
    required: ['languages'],
    title: 'Languages',
    description: 'Pydantic schema for language list.'
} as const;

export const ListReservationFiltersEnumSchema = {
    type: 'string',
    enum: ['valid', 'canceled', 'completed', 'incomplete'],
    title: 'ListReservationFiltersEnum'
} as const;

export const PermissionSchema = {
    properties: {
        name: {
            '$ref': '#/components/schemas/PermissionsEnum'
        }
    },
    type: 'object',
    required: ['name'],
    title: 'Permission'
} as const;

export const PermissionsEnumSchema = {
    type: 'string',
    enum: ['reservation.view', 'reservation.edit', 'reservationPrice.view', 'vehicle.view', 'vehicle.edit', 'vehicle.delete', 'vehicleStop.view', 'vehicleStop.edit', 'employee.view', 'employee.edit', 'employee.delete', 'employeeStop.view', 'employeeStop.edit', 'tourAgent.view', 'tourAgent.edit', 'tourAgent.delete', 'service.view', 'service.edit', 'service.delete', 'serviceType.view', 'serviceType.edit', 'serviceType.delete'],
    title: 'PermissionsEnum'
} as const;

export const PhoneNumberSchema = {
    properties: {
        name: {
            type: 'string',
            title: 'Name',
            default: 'default'
        },
        value: {
            type: 'string',
            title: 'Value'
        }
    },
    type: 'object',
    title: 'PhoneNumber',
    description: 'Pydantic model for user phone numbers.'
} as const;

export const RefreshTokenSchema = {
    properties: {
        refresh_token: {
            type: 'string',
            format: 'password',
            title: 'Refresh Token',
            writeOnly: true
        }
    },
    type: 'object',
    required: ['refresh_token'],
    title: 'RefreshToken'
} as const;

export const ReservationSchema = {
    properties: {
        name: {
            type: 'string',
            title: 'Name'
        },
        language: {
            '$ref': '#/components/schemas/Language'
        },
        price_value: {
            type: 'number',
            title: 'Price Value'
        },
        price_currency: {
            '$ref': '#/components/schemas/CurrencyEnum',
            default: 'EUR'
        },
        payment_info: {
            type: 'string',
            title: 'Payment Info'
        },
        paid: {
            type: 'boolean',
            title: 'Paid',
            default: false
        },
        note: {
            type: 'string',
            title: 'Note'
        },
        locked: {
            type: 'boolean',
            title: 'Locked',
            default: false
        },
        canceled: {
            type: 'boolean',
            title: 'Canceled',
            default: false
        },
        id: {
            type: 'integer',
            title: 'Id'
        },
        booking_number: {
            type: 'integer',
            title: 'Booking Number'
        },
        booking_serial: {
            type: 'string',
            title: 'Booking Serial'
        },
        year: {
            type: 'integer',
            title: 'Year'
        },
        tour_agent: {
            '$ref': '#/components/schemas/TourAgent',
            title: 'Tour Agent'
        },
        created: {
            type: 'string',
            format: 'date-time',
            title: 'Created'
        },
        updated: {
            type: 'string',
            format: 'date-time',
            title: 'Updated'
        },
        tour_days: {
            items: {
                '$ref': '#/components/schemas/TourDayWithoutReservation'
            },
            type: 'array',
            title: 'Tour Days'
        },
        participants: {
            items: {
                '$ref': '#/components/schemas/Customer'
            },
            type: 'array',
            title: 'Participants'
        }
    },
    type: 'object',
    required: ['name', 'language', 'price_value', 'id', 'booking_number', 'booking_serial', 'year', 'created', 'tour_days', 'participants'],
    title: 'Reservation',
    description: 'Pydantic schema for get requests on reservations.'
} as const;

export const ReservationCreateSchema = {
    properties: {
        name: {
            type: 'string',
            title: 'Name'
        },
        language: {
            '$ref': '#/components/schemas/Language'
        },
        price_value: {
            type: 'number',
            title: 'Price Value'
        },
        price_currency: {
            '$ref': '#/components/schemas/CurrencyEnum',
            default: 'EUR'
        },
        payment_info: {
            type: 'string',
            title: 'Payment Info'
        },
        paid: {
            type: 'boolean',
            title: 'Paid',
            default: false
        },
        note: {
            type: 'string',
            title: 'Note'
        },
        locked: {
            type: 'boolean',
            title: 'Locked',
            default: false
        },
        canceled: {
            type: 'boolean',
            title: 'Canceled',
            default: false
        },
        year: {
            type: 'integer',
            title: 'Year'
        },
        tour_days: {
            items: {
                '$ref': '#/components/schemas/TourDayCreate'
            },
            type: 'array',
            title: 'Tour Days'
        },
        tour_agency_id: {
            type: 'integer',
            title: 'Tour Agency Id'
        },
        participants: {
            items: {
                '$ref': '#/components/schemas/CustomerCreate'
            },
            type: 'array',
            title: 'Participants'
        }
    },
    type: 'object',
    required: ['name', 'language', 'price_value', 'year', 'tour_days', 'participants'],
    title: 'ReservationCreate',
    description: 'Pydantic schema for reservation creation'
} as const;

export const ReservationListSchema = {
    properties: {
        reservations: {
            items: {
                '$ref': '#/components/schemas/Reservation'
            },
            type: 'array',
            title: 'Reservations'
        }
    },
    type: 'object',
    required: ['reservations'],
    title: 'ReservationList'
} as const;

export const ReservationUpdateSchema = {
    properties: {
        name: {
            type: 'string',
            title: 'Name'
        },
        tour_agent_id: {
            type: 'integer',
            title: 'Tour Agent Id'
        },
        people: {
            items: {
                '$ref': '#/components/schemas/CustomerUpdate'
            },
            type: 'array',
            title: 'People',
            default: []
        },
        language_id: {
            type: 'integer',
            title: 'Language Id'
        },
        price_value: {
            type: 'number',
            title: 'Price Value'
        },
        price_currency: {
            '$ref': '#/components/schemas/CurrencyEnum',
            title: 'Price Currency'
        },
        payment_info: {
            type: 'string',
            title: 'Payment Info'
        },
        payment_is_cash: {
            type: 'boolean',
            title: 'Payment Is Cash'
        },
        paid: {
            type: 'boolean',
            title: 'Paid'
        },
        note: {
            type: 'string',
            title: 'Note'
        },
        locked: {
            type: 'boolean',
            title: 'Locked'
        },
        canceled: {
            type: 'boolean',
            title: 'Canceled'
        }
    },
    type: 'object',
    title: 'ReservationUpdate',
    description: 'Pydantic schema for reservation update.'
} as const;

export const ReservationWithParticipantsSchema = {
    properties: {
        name: {
            type: 'string',
            title: 'Name'
        },
        language: {
            '$ref': '#/components/schemas/Language'
        },
        price_value: {
            type: 'number',
            title: 'Price Value'
        },
        price_currency: {
            '$ref': '#/components/schemas/CurrencyEnum',
            default: 'EUR'
        },
        payment_info: {
            type: 'string',
            title: 'Payment Info'
        },
        paid: {
            type: 'boolean',
            title: 'Paid',
            default: false
        },
        note: {
            type: 'string',
            title: 'Note'
        },
        locked: {
            type: 'boolean',
            title: 'Locked',
            default: false
        },
        canceled: {
            type: 'boolean',
            title: 'Canceled',
            default: false
        },
        id: {
            type: 'integer',
            title: 'Id'
        },
        booking_number: {
            type: 'integer',
            title: 'Booking Number'
        },
        booking_serial: {
            type: 'string',
            title: 'Booking Serial'
        },
        year: {
            type: 'integer',
            title: 'Year'
        },
        tour_agent: {
            '$ref': '#/components/schemas/TourAgent',
            title: 'Tour Agent'
        },
        created: {
            type: 'string',
            format: 'date-time',
            title: 'Created'
        },
        updated: {
            type: 'string',
            format: 'date-time',
            title: 'Updated'
        },
        participants: {
            items: {
                '$ref': '#/components/schemas/Customer'
            },
            type: 'array',
            title: 'Participants'
        }
    },
    type: 'object',
    required: ['name', 'language', 'price_value', 'id', 'booking_number', 'booking_serial', 'year', 'created', 'participants'],
    title: 'ReservationWithParticipants',
    description: 'Pydantic schema for reservation with related people.'
} as const;

export const RoleSchema = {
    properties: {
        name: {
            '$ref': '#/components/schemas/RolesEnum'
        },
        permissions: {
            items: {
                '$ref': '#/components/schemas/Permission'
            },
            type: 'array',
            title: 'Permissions'
        }
    },
    type: 'object',
    required: ['name', 'permissions'],
    title: 'Role'
} as const;

export const RolesEnumSchema = {
    type: 'string',
    enum: ['BASE', 'CUSTOMER', 'TOUR_AGENT', 'ASSIGNEE', 'BOOKING_OFFICER', 'MGMT', 'ADMIN'],
    title: 'RolesEnum'
} as const;

export const ServiceSchema = {
    properties: {
        code: {
            type: 'string',
            title: 'Code'
        },
        name: {
            type: 'string',
            title: 'Name'
        },
        description: {
            type: 'string',
            title: 'Description'
        },
        duration: {
            type: 'number',
            title: 'Duration'
        },
        preferred_am_start_time: {
            type: 'string',
            format: 'time',
            title: 'Preferred Am Start Time'
        },
        preferred_pm_start_time: {
            type: 'string',
            format: 'time',
            title: 'Preferred Pm Start Time'
        },
        id: {
            type: 'integer',
            title: 'Id'
        },
        active: {
            type: 'boolean',
            title: 'Active',
            default: true
        },
        service_type: {
            '$ref': '#/components/schemas/ServiceTypeWithoutServices'
        }
    },
    type: 'object',
    required: ['code', 'name', 'duration', 'id', 'service_type'],
    title: 'Service',
    description: 'Pydantic schema for services GET request.'
} as const;

export const ServiceCreateSchema = {
    properties: {
        code: {
            type: 'string',
            title: 'Code'
        },
        name: {
            type: 'string',
            title: 'Name'
        },
        description: {
            type: 'string',
            title: 'Description'
        },
        duration: {
            type: 'number',
            title: 'Duration'
        },
        preferred_am_start_time: {
            type: 'string',
            format: 'time',
            title: 'Preferred Am Start Time'
        },
        preferred_pm_start_time: {
            type: 'string',
            format: 'time',
            title: 'Preferred Pm Start Time'
        },
        service_type_id: {
            type: 'integer',
            title: 'Service Type Id'
        }
    },
    type: 'object',
    required: ['code', 'name', 'duration', 'service_type_id'],
    title: 'ServiceCreate',
    description: 'Pydantic schema for service POST create request.'
} as const;

export const ServiceListSchema = {
    properties: {
        services: {
            items: {
                '$ref': '#/components/schemas/Service'
            },
            type: 'array',
            title: 'Services'
        }
    },
    type: 'object',
    required: ['services'],
    title: 'ServiceList',
    description: 'Pydantic schema for services GET list request.'
} as const;

export const ServiceTypeSchema = {
    properties: {
        name: {
            type: 'string',
            title: 'Name'
        },
        description: {
            type: 'string',
            title: 'Description'
        },
        id: {
            type: 'integer',
            title: 'Id'
        },
        services: {
            items: {
                '$ref': '#/components/schemas/ServiceWithoutServiceType'
            },
            type: 'array',
            title: 'Services'
        }
    },
    type: 'object',
    required: ['name', 'id', 'services'],
    title: 'ServiceType',
    description: 'Pydantic schema for service type GET request.'
} as const;

export const ServiceTypeCreateSchema = {
    properties: {
        name: {
            type: 'string',
            title: 'Name'
        },
        description: {
            type: 'string',
            title: 'Description'
        }
    },
    type: 'object',
    required: ['name'],
    title: 'ServiceTypeCreate',
    description: 'Pydantic schema for service type POST create request.'
} as const;

export const ServiceTypeListSchema = {
    properties: {
        service_types: {
            items: {
                '$ref': '#/components/schemas/ServiceType'
            },
            type: 'array',
            title: 'Service Types'
        }
    },
    type: 'object',
    required: ['service_types'],
    title: 'ServiceTypeList',
    description: 'Pydantic schema for service type GET list request.'
} as const;

export const ServiceTypeUpdateSchema = {
    properties: {
        name: {
            type: 'string',
            title: 'Name'
        },
        description: {
            type: 'string',
            title: 'Description'
        }
    },
    type: 'object',
    title: 'ServiceTypeUpdate',
    description: 'Pydantic schema for service type PATCH update request.'
} as const;

export const ServiceTypeWithoutServicesSchema = {
    properties: {
        name: {
            type: 'string',
            title: 'Name'
        },
        description: {
            type: 'string',
            title: 'Description'
        },
        id: {
            type: 'integer',
            title: 'Id'
        }
    },
    type: 'object',
    required: ['name', 'id'],
    title: 'ServiceTypeWithoutServices',
    description: 'Service type schema with no service relations.'
} as const;

export const ServiceUpdateSchema = {
    properties: {
        code: {
            type: 'string',
            title: 'Code'
        },
        name: {
            type: 'string',
            title: 'Name'
        },
        description: {
            type: 'string',
            title: 'Description'
        },
        duration: {
            type: 'number',
            title: 'Duration'
        },
        preferred_am_start_time: {
            type: 'string',
            format: 'time',
            title: 'Preferred Am Start Time'
        },
        preferred_pm_start_time: {
            type: 'string',
            format: 'time',
            title: 'Preferred Pm Start Time'
        },
        active: {
            type: 'boolean',
            title: 'Active'
        }
    },
    type: 'object',
    title: 'ServiceUpdate',
    description: 'Pydantic schema for service PATCH update request.'
} as const;

export const ServiceWithoutServiceTypeSchema = {
    properties: {
        code: {
            type: 'string',
            title: 'Code'
        },
        name: {
            type: 'string',
            title: 'Name'
        },
        description: {
            type: 'string',
            title: 'Description'
        },
        duration: {
            type: 'number',
            title: 'Duration'
        },
        preferred_am_start_time: {
            type: 'string',
            format: 'time',
            title: 'Preferred Am Start Time'
        },
        preferred_pm_start_time: {
            type: 'string',
            format: 'time',
            title: 'Preferred Pm Start Time'
        },
        id: {
            type: 'integer',
            title: 'Id'
        },
        active: {
            type: 'boolean',
            title: 'Active',
            default: true
        }
    },
    type: 'object',
    required: ['code', 'name', 'duration', 'id'],
    title: 'ServiceWithoutServiceType',
    description: 'Service schema without service type relation.'
} as const;

export const SkillsEnumSchema = {
    type: 'string',
    enum: ['booking_officer', 'local_guide', 'van_driver', 'driving_guide', 'in_house_guide', 'driver_only', 'trainee'],
    title: 'SkillsEnum'
} as const;

export const StopSchema = {
    properties: {
        type: {
            '$ref': '#/components/schemas/StopTypeEnum'
        },
        start_datetime: {
            type: 'string',
            format: 'date-time',
            title: 'Start Datetime'
        },
        end_datetime: {
            type: 'string',
            format: 'date-time',
            title: 'End Datetime'
        },
        id: {
            type: 'integer',
            title: 'Id'
        },
        entity_id: {
            type: 'string',
            title: 'Entity Id'
        }
    },
    type: 'object',
    required: ['type', 'start_datetime', 'end_datetime', 'id', 'entity_id'],
    title: 'Stop',
    description: 'Pydantic schema for get cart stops requests.'
} as const;

export const StopCreateSchema = {
    properties: {
        type: {
            '$ref': '#/components/schemas/StopTypeEnum'
        },
        start_datetime: {
            type: 'string',
            format: 'date-time',
            title: 'Start Datetime'
        },
        end_datetime: {
            type: 'string',
            format: 'date-time',
            title: 'End Datetime'
        }
    },
    type: 'object',
    required: ['type', 'start_datetime', 'end_datetime'],
    title: 'StopCreate',
    description: 'Pydantic schema for creation of cart stops.'
} as const;

export const StopTypeEnumSchema = {
    type: 'string',
    enum: ['holiday', 'sick_leave', 'damage', 'detention'],
    title: 'StopTypeEnum'
} as const;

export const StopUpdateSchema = {
    properties: {
        type: {
            anyOf: [
                {
                    '$ref': '#/components/schemas/StopTypeEnum'
                },
                {
                    type: 'null'
                }
            ]
        },
        start_datetime: {
            anyOf: [
                {
                    type: 'string',
                    format: 'date-time'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Start Datetime'
        },
        end_datetime: {
            anyOf: [
                {
                    type: 'string',
                    format: 'date-time'
                },
                {
                    type: 'null'
                }
            ],
            title: 'End Datetime'
        }
    },
    type: 'object',
    title: 'StopUpdate',
    description: 'Base pydantic driver stop update schema.'
} as const;

export const TokenSchema = {
    properties: {
        token: {
            type: 'string',
            format: 'password',
            title: 'Token',
            writeOnly: true
        }
    },
    type: 'object',
    required: ['token'],
    title: 'Token'
} as const;

export const TokenResponseSchema = {
    properties: {
        token: {
            type: 'string',
            title: 'Token'
        },
        refresh_token: {
            type: 'string',
            title: 'Refresh Token'
        }
    },
    type: 'object',
    required: ['token', 'refresh_token'],
    title: 'TokenResponse'
} as const;

export const TourSchema = {
    properties: {
        start_time: {
            type: 'string',
            format: 'time',
            title: 'Start Time'
        },
        end_time: {
            type: 'string',
            format: 'time',
            title: 'End Time'
        },
        pickup: {
            type: 'string',
            title: 'Pickup'
        },
        dropoff: {
            type: 'string',
            title: 'Dropoff'
        },
        id: {
            type: 'integer',
            title: 'Id'
        },
        service: {
            '$ref': '#/components/schemas/Service'
        },
        vehicles: {
            items: {
                '$ref': '#/components/schemas/VehicleORM'
            },
            type: 'array',
            title: 'Vehicles'
        },
        drivers: {
            items: {
                '$ref': '#/components/schemas/EmployeeORM'
            },
            type: 'array',
            title: 'Drivers'
        }
    },
    type: 'object',
    required: ['start_time', 'end_time', 'id', 'service', 'vehicles', 'drivers'],
    title: 'Tour',
    description: 'Pydantic schema for tour GET requests.'
} as const;

export const TourAgenciesListSchema = {
    properties: {
        tour_agencies: {
            items: {
                '$ref': '#/components/schemas/TourAgencyWithAgents'
            },
            type: 'array',
            title: 'Tour Agencies'
        }
    },
    type: 'object',
    required: ['tour_agencies'],
    title: 'TourAgenciesList'
} as const;

export const TourAgencySchema = {
    properties: {
        name: {
            type: 'string',
            title: 'Name'
        },
        active: {
            type: 'boolean',
            title: 'Active',
            default: true
        },
        id: {
            type: 'integer',
            title: 'Id'
        }
    },
    type: 'object',
    required: ['name', 'id'],
    title: 'TourAgency'
} as const;

export const TourAgencyCreateSchema = {
    properties: {
        name: {
            type: 'string',
            title: 'Name'
        },
        active: {
            type: 'boolean',
            title: 'Active',
            default: true
        }
    },
    type: 'object',
    required: ['name'],
    title: 'TourAgencyCreate'
} as const;

export const TourAgencyWithAgentsSchema = {
    properties: {
        name: {
            type: 'string',
            title: 'Name'
        },
        active: {
            type: 'boolean',
            title: 'Active',
            default: true
        },
        id: {
            type: 'integer',
            title: 'Id'
        },
        tour_agents: {
            items: {
                '$ref': '#/components/schemas/User'
            },
            type: 'array',
            title: 'Tour Agents'
        }
    },
    type: 'object',
    required: ['name', 'id', 'tour_agents'],
    title: 'TourAgencyWithAgents'
} as const;

export const TourAgentSchema = {
    properties: {
        email: {
            type: 'string',
            format: 'email',
            title: 'Email'
        },
        email_verified: {
            type: 'boolean',
            title: 'Email Verified',
            default: false
        },
        sub: {
            anyOf: [
                {
                    type: 'string'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Sub'
        },
        given_name: {
            type: 'string',
            title: 'Given Name'
        },
        family_name: {
            type: 'string',
            title: 'Family Name'
        },
        middle_name: {
            type: 'string',
            title: 'Middle Name'
        },
        nickname: {
            type: 'string',
            title: 'Nickname'
        },
        date_of_birth: {
            type: 'string',
            format: 'date',
            title: 'Date Of Birth'
        },
        gender: {
            '$ref': '#/components/schemas/GenderEnum',
            default: 'unknown'
        },
        picture: {
            type: 'string',
            title: 'Picture'
        },
        password: {
            type: 'string',
            format: 'password',
            title: 'Password',
            writeOnly: true
        },
        uid: {
            type: 'string',
            format: 'uuid',
            title: 'Uid'
        },
        active: {
            type: 'boolean',
            title: 'Active',
            default: true
        },
        role: {
            '$ref': '#/components/schemas/Role'
        },
        country: {
            anyOf: [
                {
                    '$ref': '#/components/schemas/Country'
                },
                {
                    type: 'null'
                }
            ]
        },
        websites: {
            items: {
                '$ref': '#/components/schemas/Website'
            },
            type: 'array',
            title: 'Websites'
        },
        emails: {
            items: {
                '$ref': '#/components/schemas/Email'
            },
            type: 'array',
            title: 'Emails'
        },
        phone_numbers: {
            items: {
                '$ref': '#/components/schemas/PhoneNumber'
            },
            type: 'array',
            title: 'Phone Numbers'
        },
        tour_agency: {
            '$ref': '#/components/schemas/TourAgency'
        },
        reservations: {
            items: {
                '$ref': '#/components/schemas/Reservation'
            },
            type: 'array',
            title: 'Reservations'
        }
    },
    type: 'object',
    required: ['uid', 'role', 'country', 'websites', 'emails', 'phone_numbers', 'tour_agency', 'reservations'],
    title: 'TourAgent'
} as const;

export const TourAgentCreateSchema = {
    properties: {
        websites: {
            items: {
                '$ref': '#/components/schemas/Website'
            },
            type: 'array',
            title: 'Websites',
            default: []
        },
        emails: {
            items: {
                '$ref': '#/components/schemas/Email'
            },
            type: 'array',
            title: 'Emails',
            default: []
        },
        phone_numbers: {
            items: {
                '$ref': '#/components/schemas/PhoneNumber'
            },
            type: 'array',
            title: 'Phone Numbers',
            default: []
        },
        email: {
            type: 'string',
            format: 'email',
            title: 'Email'
        },
        email_verified: {
            type: 'boolean',
            title: 'Email Verified',
            default: false
        },
        sub: {
            anyOf: [
                {
                    type: 'string'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Sub'
        },
        given_name: {
            type: 'string',
            title: 'Given Name'
        },
        family_name: {
            type: 'string',
            title: 'Family Name'
        },
        middle_name: {
            type: 'string',
            title: 'Middle Name'
        },
        nickname: {
            type: 'string',
            title: 'Nickname'
        },
        date_of_birth: {
            type: 'string',
            format: 'date',
            title: 'Date Of Birth'
        },
        gender: {
            '$ref': '#/components/schemas/GenderEnum',
            default: 'unknown'
        },
        picture: {
            type: 'string',
            title: 'Picture'
        },
        password: {
            type: 'string',
            format: 'password',
            title: 'Password',
            writeOnly: true
        },
        tour_agency_id: {
            type: 'integer',
            title: 'Tour Agency Id'
        }
    },
    type: 'object',
    required: ['tour_agency_id'],
    title: 'TourAgentCreate',
    description: 'Pydantic schema for creation of agents.'
} as const;

export const TourAgentListSchema = {
    properties: {
        tour_agents: {
            items: {
                '$ref': '#/components/schemas/TourAgent'
            },
            type: 'array',
            title: 'Tour Agents'
        }
    },
    type: 'object',
    required: ['tour_agents'],
    title: 'TourAgentList',
    description: 'Pydantic schema for retrieving a list of agents.'
} as const;

export const TourAgentUpdateSchema = {
    properties: {
        websites: {
            items: {
                '$ref': '#/components/schemas/Website'
            },
            type: 'array',
            title: 'Websites',
            default: []
        },
        emails: {
            items: {
                '$ref': '#/components/schemas/Email'
            },
            type: 'array',
            title: 'Emails',
            default: []
        },
        phone_numbers: {
            items: {
                '$ref': '#/components/schemas/PhoneNumber'
            },
            type: 'array',
            title: 'Phone Numbers',
            default: []
        },
        email: {
            type: 'string',
            format: 'email',
            title: 'Email'
        },
        email_verified: {
            type: 'boolean',
            title: 'Email Verified',
            default: false
        },
        sub: {
            anyOf: [
                {
                    type: 'string'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Sub'
        },
        given_name: {
            type: 'string',
            title: 'Given Name'
        },
        family_name: {
            type: 'string',
            title: 'Family Name'
        },
        middle_name: {
            type: 'string',
            title: 'Middle Name'
        },
        nickname: {
            type: 'string',
            title: 'Nickname'
        },
        date_of_birth: {
            type: 'string',
            format: 'date',
            title: 'Date Of Birth'
        },
        gender: {
            '$ref': '#/components/schemas/GenderEnum',
            default: 'unknown'
        },
        picture: {
            type: 'string',
            title: 'Picture'
        },
        password: {
            type: 'string',
            format: 'password',
            title: 'Password',
            writeOnly: true
        },
        role_name: {
            '$ref': '#/components/schemas/RolesEnum',
            title: 'Role Name'
        },
        refresh_token_uid: {
            type: 'string',
            title: 'Refresh Token Uid'
        },
        active: {
            type: 'boolean',
            title: 'Active'
        },
        tour_agency_id: {
            type: 'integer',
            title: 'Tour Agency Id'
        }
    },
    type: 'object',
    title: 'TourAgentUpdate'
} as const;

export const TourCreateSchema = {
    properties: {
        start_time: {
            type: 'string',
            format: 'time',
            title: 'Start Time'
        },
        end_time: {
            type: 'string',
            format: 'time',
            title: 'End Time'
        },
        pickup: {
            type: 'string',
            title: 'Pickup'
        },
        dropoff: {
            type: 'string',
            title: 'Dropoff'
        },
        service_id: {
            type: 'integer',
            title: 'Service Id'
        }
    },
    type: 'object',
    required: ['start_time', 'end_time', 'service_id'],
    title: 'TourCreate',
    description: 'Pydantic schema for tour POST create requests.'
} as const;

export const TourDaySchema = {
    properties: {
        tour_date: {
            type: 'string',
            format: 'date',
            title: 'Tour Date'
        },
        id: {
            type: 'integer',
            title: 'Id'
        },
        tours: {
            items: {
                '$ref': '#/components/schemas/Tour'
            },
            type: 'array',
            title: 'Tours'
        },
        previous_day_id: {
            type: 'integer',
            title: 'Previous Day Id'
        },
        next_day_id: {
            type: 'integer',
            title: 'Next Day Id'
        },
        reservation: {
            '$ref': '#/components/schemas/ReservationWithParticipants'
        }
    },
    type: 'object',
    required: ['tour_date', 'id', 'tours', 'reservation'],
    title: 'TourDay',
    description: 'Pydantic schema for tour day GET requests.'
} as const;

export const TourDayCreateSchema = {
    properties: {
        tour_date: {
            type: 'string',
            format: 'date',
            title: 'Tour Date'
        },
        tours: {
            items: {
                '$ref': '#/components/schemas/TourCreate'
            },
            type: 'array',
            title: 'Tours'
        }
    },
    type: 'object',
    required: ['tour_date', 'tours'],
    title: 'TourDayCreate',
    description: 'Pydantic schema for tour day POST create requests.'
} as const;

export const TourDayListSchema = {
    properties: {
        tour_days: {
            items: {
                '$ref': '#/components/schemas/TourDay'
            },
            type: 'array',
            title: 'Tour Days'
        }
    },
    type: 'object',
    required: ['tour_days'],
    title: 'TourDayList',
    description: 'Pydantic schema for tour day GET list requests.'
} as const;

export const TourDayUpdateSchema = {
    properties: {
        reservation: {
            '$ref': '#/components/schemas/ReservationUpdate',
            title: 'Reservation'
        },
        tour_date: {
            type: 'string',
            format: 'date',
            title: 'Tour Date'
        },
        tours: {
            items: {
                '$ref': '#/components/schemas/TourUpdate'
            },
            type: 'array',
            title: 'Tours'
        }
    },
    type: 'object',
    required: ['tours'],
    title: 'TourDayUpdate',
    description: 'Pydantic schema for tour day update requests.'
} as const;

export const TourDayWithoutReservationSchema = {
    properties: {
        tour_date: {
            type: 'string',
            format: 'date',
            title: 'Tour Date'
        },
        id: {
            type: 'integer',
            title: 'Id'
        },
        tours: {
            items: {
                '$ref': '#/components/schemas/Tour'
            },
            type: 'array',
            title: 'Tours'
        },
        previous_day_id: {
            type: 'integer',
            title: 'Previous Day Id'
        },
        next_day_id: {
            type: 'integer',
            title: 'Next Day Id'
        }
    },
    type: 'object',
    required: ['tour_date', 'id', 'tours'],
    title: 'TourDayWithoutReservation',
    description: 'Tour day schema without reservation relation.'
} as const;

export const TourDaysCountByFilterSchemaSchema = {
    properties: {
        valid: {
            type: 'integer',
            title: 'Valid'
        },
        canceled: {
            type: 'integer',
            title: 'Canceled'
        },
        completed: {
            type: 'integer',
            title: 'Completed'
        },
        incomplete: {
            type: 'integer',
            title: 'Incomplete'
        }
    },
    type: 'object',
    required: ['valid', 'canceled', 'completed', 'incomplete'],
    title: 'TourDaysCountByFilterSchema',
    description: 'Pydantic schema for count-by-filter endpoint.'
} as const;

export const TourUpdateSchema = {
    properties: {
        id: {
            type: 'integer',
            title: 'Id'
        },
        start_time: {
            type: 'string',
            format: 'time',
            title: 'Start Time'
        },
        end_time: {
            type: 'string',
            format: 'time',
            title: 'End Time'
        },
        service_id: {
            type: 'integer',
            title: 'Service Id'
        },
        vehicles_plates: {
            items: {
                type: 'string'
            },
            type: 'array',
            title: 'Vehicles Plates',
            default: []
        },
        drivers_uids: {
            items: {
                type: 'string',
                format: 'uuid'
            },
            type: 'array',
            title: 'Drivers Uids',
            default: []
        }
    },
    type: 'object',
    required: ['id'],
    title: 'TourUpdate',
    description: 'Pydantic schema for tour PATCH update requests.'
} as const;

export const TourWithoutAssignmentsSchema = {
    properties: {
        start_time: {
            type: 'string',
            format: 'time',
            title: 'Start Time'
        },
        end_time: {
            type: 'string',
            format: 'time',
            title: 'End Time'
        },
        pickup: {
            type: 'string',
            title: 'Pickup'
        },
        dropoff: {
            type: 'string',
            title: 'Dropoff'
        },
        id: {
            type: 'integer',
            title: 'Id'
        },
        service: {
            '$ref': '#/components/schemas/Service'
        }
    },
    type: 'object',
    required: ['start_time', 'end_time', 'id', 'service'],
    title: 'TourWithoutAssignments',
    description: 'Pydantic schema for tour without golf carts or drivers'
} as const;

export const UserSchema = {
    properties: {
        email: {
            type: 'string',
            format: 'email',
            title: 'Email'
        },
        email_verified: {
            type: 'boolean',
            title: 'Email Verified',
            default: false
        },
        sub: {
            anyOf: [
                {
                    type: 'string'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Sub'
        },
        given_name: {
            type: 'string',
            title: 'Given Name'
        },
        family_name: {
            type: 'string',
            title: 'Family Name'
        },
        middle_name: {
            type: 'string',
            title: 'Middle Name'
        },
        nickname: {
            type: 'string',
            title: 'Nickname'
        },
        date_of_birth: {
            type: 'string',
            format: 'date',
            title: 'Date Of Birth'
        },
        gender: {
            '$ref': '#/components/schemas/GenderEnum',
            default: 'unknown'
        },
        picture: {
            type: 'string',
            title: 'Picture'
        },
        password: {
            type: 'string',
            format: 'password',
            title: 'Password',
            writeOnly: true
        },
        uid: {
            type: 'string',
            format: 'uuid',
            title: 'Uid'
        },
        active: {
            type: 'boolean',
            title: 'Active',
            default: true
        },
        role: {
            '$ref': '#/components/schemas/Role'
        },
        country: {
            anyOf: [
                {
                    '$ref': '#/components/schemas/Country'
                },
                {
                    type: 'null'
                }
            ]
        },
        websites: {
            items: {
                '$ref': '#/components/schemas/Website'
            },
            type: 'array',
            title: 'Websites'
        },
        emails: {
            items: {
                '$ref': '#/components/schemas/Email'
            },
            type: 'array',
            title: 'Emails'
        },
        phone_numbers: {
            items: {
                '$ref': '#/components/schemas/PhoneNumber'
            },
            type: 'array',
            title: 'Phone Numbers'
        }
    },
    type: 'object',
    required: ['uid', 'role', 'country', 'websites', 'emails', 'phone_numbers'],
    title: 'User'
} as const;

export const UserCreateSchema = {
    properties: {
        websites: {
            items: {
                '$ref': '#/components/schemas/Website'
            },
            type: 'array',
            title: 'Websites',
            default: []
        },
        emails: {
            items: {
                '$ref': '#/components/schemas/Email'
            },
            type: 'array',
            title: 'Emails',
            default: []
        },
        phone_numbers: {
            items: {
                '$ref': '#/components/schemas/PhoneNumber'
            },
            type: 'array',
            title: 'Phone Numbers',
            default: []
        },
        email: {
            type: 'string',
            format: 'email',
            title: 'Email'
        },
        email_verified: {
            type: 'boolean',
            title: 'Email Verified',
            default: false
        },
        sub: {
            anyOf: [
                {
                    type: 'string'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Sub'
        },
        given_name: {
            type: 'string',
            title: 'Given Name'
        },
        family_name: {
            type: 'string',
            title: 'Family Name'
        },
        middle_name: {
            type: 'string',
            title: 'Middle Name'
        },
        nickname: {
            type: 'string',
            title: 'Nickname'
        },
        date_of_birth: {
            type: 'string',
            format: 'date',
            title: 'Date Of Birth'
        },
        gender: {
            '$ref': '#/components/schemas/GenderEnum',
            default: 'unknown'
        },
        picture: {
            type: 'string',
            title: 'Picture'
        },
        password: {
            type: 'string',
            format: 'password',
            title: 'Password',
            writeOnly: true
        }
    },
    type: 'object',
    title: 'UserCreate',
    description: 'Pydantic schema for user create.'
} as const;

export const UserForTokenSchema = {
    properties: {
        email: {
            type: 'string',
            format: 'email',
            title: 'Email'
        },
        email_verified: {
            type: 'boolean',
            title: 'Email Verified',
            default: false
        },
        sub: {
            anyOf: [
                {
                    type: 'string'
                },
                {
                    type: 'null'
                }
            ],
            title: 'Sub'
        },
        given_name: {
            type: 'string',
            title: 'Given Name'
        },
        family_name: {
            type: 'string',
            title: 'Family Name'
        },
        middle_name: {
            type: 'string',
            title: 'Middle Name'
        },
        nickname: {
            type: 'string',
            title: 'Nickname'
        },
        date_of_birth: {
            type: 'string',
            format: 'date',
            title: 'Date Of Birth'
        },
        gender: {
            '$ref': '#/components/schemas/GenderEnum',
            default: 'unknown'
        },
        picture: {
            type: 'string',
            title: 'Picture'
        },
        password: {
            type: 'string',
            format: 'password',
            title: 'Password',
            writeOnly: true
        },
        uid: {
            type: 'string',
            format: 'uuid',
            title: 'Uid'
        },
        active: {
            type: 'boolean',
            title: 'Active',
            default: true
        },
        role: {
            '$ref': '#/components/schemas/Role'
        },
        country: {
            anyOf: [
                {
                    '$ref': '#/components/schemas/Country'
                },
                {
                    type: 'null'
                }
            ]
        },
        websites: {
            items: {
                '$ref': '#/components/schemas/Website'
            },
            type: 'array',
            title: 'Websites'
        },
        emails: {
            items: {
                '$ref': '#/components/schemas/Email'
            },
            type: 'array',
            title: 'Emails'
        },
        phone_numbers: {
            items: {
                '$ref': '#/components/schemas/PhoneNumber'
            },
            type: 'array',
            title: 'Phone Numbers'
        },
        refresh_token_uid: {
            type: 'string',
            format: 'uuid',
            title: 'Refresh Token Uid'
        }
    },
    type: 'object',
    required: ['uid', 'role', 'country', 'websites', 'emails', 'phone_numbers', 'refresh_token_uid'],
    title: 'UserForToken',
    description: 'Special schema for returning refresh_token_uid with User.'
} as const;

export const UserListSchema = {
    properties: {
        users: {
            items: {
                '$ref': '#/components/schemas/User'
            },
            type: 'array',
            title: 'Users'
        }
    },
    type: 'object',
    required: ['users'],
    title: 'UserList',
    description: 'Pydantic schema to list users.'
} as const;

export const UserWithTokensSchema = {
    properties: {
        token: {
            type: 'string',
            title: 'Token'
        },
        refresh_token: {
            type: 'string',
            title: 'Refresh Token'
        },
        user: {
            '$ref': '#/components/schemas/UserForToken'
        }
    },
    type: 'object',
    required: ['token', 'refresh_token', 'user'],
    title: 'UserWithTokens',
    description: 'Schema for login endpoints response'
} as const;

export const ValidationErrorSchema = {
    properties: {
        loc: {
            items: {
                anyOf: [
                    {
                        type: 'string'
                    },
                    {
                        type: 'integer'
                    }
                ]
            },
            type: 'array',
            title: 'Location'
        },
        msg: {
            type: 'string',
            title: 'Message'
        },
        type: {
            type: 'string',
            title: 'Error Type'
        }
    },
    type: 'object',
    required: ['loc', 'msg', 'type'],
    title: 'ValidationError'
} as const;

export const VehicleSchema = {
    properties: {
        type: {
            '$ref': '#/components/schemas/VehicleTypesEnum',
            default: 'generic'
        },
        brand: {
            type: 'string',
            title: 'Brand'
        },
        model: {
            type: 'string',
            title: 'Model'
        },
        seats: {
            type: 'integer',
            title: 'Seats'
        },
        picture: {
            type: 'string',
            title: 'Picture'
        },
        active: {
            type: 'boolean',
            title: 'Active',
            default: true
        },
        name: {
            type: 'string',
            title: 'Name'
        },
        plate: {
            type: 'string',
            maxLength: 12,
            minLength: 7,
            title: 'Plate'
        },
        battery: {
            '$ref': '#/components/schemas/Battery'
        },
        tours: {
            items: {
                '$ref': '#/components/schemas/Tour'
            },
            type: 'array',
            title: 'Tours'
        },
        stops: {
            items: {
                '$ref': '#/components/schemas/Stop'
            },
            type: 'array',
            title: 'Stops'
        }
    },
    type: 'object',
    required: ['seats', 'plate', 'battery', 'tours', 'stops'],
    title: 'Vehicle',
    description: 'Pydantic schema for get vehicle.'
} as const;

export const VehicleCreateSchema = {
    properties: {
        type: {
            '$ref': '#/components/schemas/VehicleTypesEnum',
            default: 'generic'
        },
        brand: {
            type: 'string',
            title: 'Brand'
        },
        model: {
            type: 'string',
            title: 'Model'
        },
        seats: {
            type: 'integer',
            maximum: 12,
            minimum: 1,
            title: 'Seats'
        },
        picture: {
            type: 'string',
            title: 'Picture'
        },
        active: {
            type: 'boolean',
            title: 'Active',
            default: true
        },
        name: {
            type: 'string',
            title: 'Name'
        },
        plate: {
            type: 'string',
            title: 'Plate'
        },
        battery_id: {
            type: 'integer',
            title: 'Battery Id'
        }
    },
    type: 'object',
    required: ['seats', 'plate'],
    title: 'VehicleCreate'
} as const;

export const VehicleListSchema = {
    properties: {
        vehicles: {
            items: {
                '$ref': '#/components/schemas/Vehicle'
            },
            type: 'array',
            title: 'Vehicles'
        }
    },
    type: 'object',
    required: ['vehicles'],
    title: 'VehicleList'
} as const;

export const VehicleORMSchema = {
    properties: {
        type: {
            '$ref': '#/components/schemas/VehicleTypesEnum',
            default: 'generic'
        },
        brand: {
            type: 'string',
            title: 'Brand'
        },
        model: {
            type: 'string',
            title: 'Model'
        },
        seats: {
            type: 'integer',
            title: 'Seats'
        },
        picture: {
            type: 'string',
            title: 'Picture'
        },
        active: {
            type: 'boolean',
            title: 'Active',
            default: true
        },
        name: {
            type: 'string',
            title: 'Name'
        },
        plate: {
            type: 'string',
            maxLength: 12,
            minLength: 7,
            title: 'Plate'
        }
    },
    type: 'object',
    required: ['seats', 'plate'],
    title: 'VehicleORM'
} as const;

export const VehicleTypesEnumSchema = {
    type: 'string',
    enum: ['generic', 'van', 'golf_cart'],
    title: 'VehicleTypesEnum'
} as const;

export const VehicleUpdateSchema = {
    properties: {
        battery_id: {
            type: 'integer',
            title: 'Battery Id'
        },
        picture: {
            type: 'string',
            title: 'Picture'
        },
        active: {
            type: 'boolean',
            title: 'Active'
        }
    },
    type: 'object',
    title: 'VehicleUpdate'
} as const;

export const WebsiteSchema = {
    properties: {
        name: {
            type: 'string',
            title: 'Name',
            default: 'default'
        },
        value: {
            type: 'string',
            minLength: 1,
            format: 'uri',
            title: 'Value'
        }
    },
    type: 'object',
    title: 'Website',
    description: 'Base pydantic model for user websites.'
} as const;