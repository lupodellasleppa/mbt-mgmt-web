{'openapi': '3.1.0', 'info': {'title': 'FastAPI', 'version': '0.1.0'}, 'paths': {'/api/v1/tour-agents/tour-agencies': {'get': {'tags': ['Tour Agents & Tour Agencies'], 'summary': 'List Tour Agencies', 'operationId': 'list_tour_agencies_api_v1_tour_agents_tour_agencies_get', 'responses': {'200': {'description': 'Successful Response', 'content': {'application/json': {'schema': {'$ref': '#/components/schemas/TourAgenciesList'}}}}, '404': {'description': 'Not found.'}}, 'security': [{'JWTBearer': []}]}, 'post': {'tags': ['Tour Agents & Tour Agencies'], 'summary': 'Create Agency', 'operationId': 'create_agency_api_v1_tour_agents_tour_agencies_post', 'requestBody': {'content': {'application/json': {'schema': {'$ref': '#/components/schemas/TourAgencyCreate'}}}, 'required': True}, 'responses': {'201': {'description': 'Successful Response', 'content': {'application/json': {'schema': {'$ref': '#/components/schemas/TourAgency'}}}}, '404': {'description': 'Not found.'}, '422': {'description': 'Validation Error', 'content': {'application/json': {'schema': {'$ref': '#/components/schemas/HTTPValidationError'}}}}}, 'security': [{'JWTBearer': []}]}}, '/api/v1/tour-agents/tour-agencies/by-id/{tour_agency_id}': {'get': {'tags': ['Tour Agents & Tour Agencies'], 'summary': 'Get By Id', 'operationId': 'get_by_id_api_v1_tour_agents_tour_agencies_by_id__tour_agency_id__get', 'security': [{'JWTBearer': []}], 'parameters': [{'name': 'tour_agency_id', 'in': 'path', 'required': True, 'schema': {'type': 'integer', 'title': 'Tour Agency Id'}}], 'responses': {'200': {'description': 'Successful Response', 'content': {'application/json': {'schema': {'$ref': '#/components/schemas/TourAgency'}}}}, '404': {'description': 'Not found.'}, '422': {'description': 'Validation Error', 'content': {'application/json': {'schema': {'$ref': '#/components/schemas/HTTPValidationError'}}}}}}}, '/api/v1/tour-agents/tour-agencies/search': {'post': {'tags': ['Tour Agents & Tour Agencies'], 'summary': 'Query Tour Agencies', 'operationId': 'query_tour_agencies_api_v1_tour_agents_tour_agencies_search_post', 'requestBody': {'content': {'application/json': {'schema': {'type': 'string', 'title': 'Q'}}}, 'required': True}, 'responses': {'200': {'description': 'Successful Response', 'content': {'application/json': {'schema': {'$ref': '#/components/schemas/TourAgenciesList'}}}}, '404': {'description': 'Not found.'}, '422': {'description': 'Validation Error', 'content': {'application/json': {'schema': {'$ref': '#/components/schemas/HTTPValidationError'}}}}}, 'security': [{'JWTBearer': []}]}}, '/api/v1/tour-agents': {'get': {'tags': ['Tour Agents & Tour Agencies'], 'summary': 'List Agents', 'operationId': 'list_agents_api_v1_tour_agents_get', 'responses': {'200': {'description': 'Successful Response', 'content': {'application/json': {'schema': {'$ref': '#/components/schemas/TourAgentList'}}}}, '404': {'description': 'Not found.'}}, 'security': [{'JWTBearer': []}]}, 'post': {'tags': ['Tour Agents & Tour Agencies'], 'summary': 'Create Agent', 'operationId': 'create_agent_api_v1_tour_agents_post', 'requestBody': {'content': {'application/json': {'schema': {'$ref': '#/components/schemas/TourAgentCreate'}}}, 'required': True}, 'responses': {'201': {'description': 'Successful Response', 'content': {'application/json': {'schema': {'$ref': '#/components/schemas/TourAgent'}}}}, '404': {'description': 'Not found.'}, '422': {'description': 'Validation Error', 'content': {'application/json': {'schema': {'$ref': '#/components/schemas/HTTPValidationError'}}}}}, 'security': [{'JWTBearer': []}, {'JWTBearer': []}]}}, '/api/v1/tour-agents/search': {'post': {'tags': ['Tour Agents & Tour Agencies'], 'summary': 'Query Agents', 'operationId': 'query_agents_api_v1_tour_agents_search_post', 'requestBody': {'content': {'application/json': {'schema': {'type': 'string', 'title': 'Q'}}}, 'required': True}, 'responses': {'200': {'description': 'Successful Response', 'content': {'application/json': {'schema': {'$ref': '#/components/schemas/TourAgentList'}}}}, '404': {'description': 'Not found.'}, '422': {'description': 'Validation Error', 'content': {'application/json': {'schema': {'$ref': '#/components/schemas/HTTPValidationError'}}}}}, 'security': [{'JWTBearer': []}]}}, '/api/v1/tour-agents/{agent_uid}': {'get': {'tags': ['Tour Agents & Tour Agencies'], 'summary': 'Get Agent', 'operationId': 'get_agent_api_v1_tour_agents__agent_uid__get', 'security': [{'JWTBearer': []}], 'parameters': [{'name': 'agent_uid', 'in': 'path', 'required': True, 'schema': {'type': 'string', 'format': 'uuid', 'title': 'Agent Uid'}}], 'responses': {'200': {'description': 'Successful Response', 'content': {'application/json': {'schema': {'$ref': '#/components/schemas/TourAgent'}}}}, '404': {'description': 'Not found.'}, '422': {'description': 'Validation Error', 'content': {'application/json': {'schema': {'$ref': '#/components/schemas/HTTPValidationError'}}}}}}, 'patch': {'tags': ['Tour Agents & Tour Agencies'], 'summary': 'Update Agent', 'operationId': 'update_agent_api_v1_tour_agents__agent_uid__patch', 'security': [{'JWTBearer': []}, {'JWTBearer': []}], 'parameters': [{'name': 'agent_uid', 'in': 'path', 'required': True, 'schema': {'type': 'string', 'format': 'uuid', 'title': 'Agent Uid'}}], 'requestBody': {'required': True, 'content': {'application/json': {'schema': {'$ref': '#/components/schemas/TourAgentUpdate'}}}}, 'responses': {'200': {'description': 'Successful Response', 'content': {'application/json': {'schema': {'$ref': '#/components/schemas/TourAgent'}}}}, '404': {'description': 'Not found.'}, '422': {'description': 'Validation Error', 'content': {'application/json': {'schema': {'$ref': '#/components/schemas/HTTPValidationError'}}}}}}, 'delete': {'tags': ['Tour Agents & Tour Agencies'], 'summary': 'Delete Agent', 'operationId': 'delete_agent_api_v1_tour_agents__agent_uid__delete', 'security': [{'JWTBearer': []}, {'JWTBearer': []}], 'parameters': [{'name': 'agent_uid', 'in': 'path', 'required': True, 'schema': {'type': 'string', 'format': 'uuid', 'title': 'Agent Uid'}}], 'responses': {'200': {'description': 'Successful Response', 'content': {'application/json': {'schema': {}}}}, '404': {'description': 'Not found.'}, '422': {'description': 'Validation Error', 'content': {'application/json': {'schema': {'$ref': '#/components/schemas/HTTPValidationError'}}}}}}}, '/api/v1/vehicles/stops/by-plate/{plate}': {'get': {'tags': ['vehicles'], 'summary': 'List Stops', 'operationId': 'list_stops_api_v1_vehicles_stops_by_plate__plate__get', 'security': [{'JWTBearer': []}], 'parameters': [{'name': 'plate', 'in': 'path', 'required': True, 'schema': {'type': 'string', 'title': 'Plate'}}, {'name': 'start_datetime_from', 'in': 'query', 'required': False, 'schema': {'anyOf': [{'type': 'string', 'format': 'date-time'}, {'type': 'null'}], 'title': 'Start Datetime From'}}, {'name': 'start_datetime_to', 'in': 'query', 'required': False, 'schema': {'anyOf': [{'type': 'string', 'format': 'date-time'}, {'type': 'null'}], 'title': 'Start Datetime To'}}, {'name': 'end_datetime_from', 'in': 'query', 'required': False, 'schema': {'anyOf': [{'type': 'string', 'format': 'date-time'}, {'type': 'null'}], 'title': 'End Datetime From'}}, {'name': 'end_datetime_to', 'in': 'query', 'required': False, 'schema': {'anyOf': [{'type': 'string', 'format': 'date-time'}, {'type': 'null'}], 'title': 'End Datetime To'}}, {'name': 'limit', 'in': 'query', 'required': False, 'schema': {'anyOf': [{'type': 'integer'}, {'type': 'null'}], 'title': 'Limit'}}, {'name': 'filters', 'in': 'query', 'required': False, 'schema': {'type': 'array', 'items': {'$ref': '#/components/schemas/StopTypeEnum'}, 'default': [], 'title': 'Filters'}}], 'responses': {'200': {'description': 'Successful Response', 'content': {'application/json': {'schema': {'type': 'array', 'items': {'$ref': '#/components/schemas/Stop'}, 'title': 'Response List Stops Api V1 Vehicles Stops By Plate  Plate  Get'}}}}, '404': {'description': 'Not found.'}, '422': {'description': 'Validation Error', 'content': {'application/json': {'schema': {'$ref': '#/components/schemas/HTTPValidationError'}}}}}}}, '/api/v1/vehicles/stops/{stop_id}': {'get': {'tags': ['vehicles'], 'summary': 'Get Stop', 'operationId': 'get_stop_api_v1_vehicles_stops__stop_id__get', 'security': [{'JWTBearer': []}], 'parameters': [{'name': 'stop_id', 'in': 'path', 'required': True, 'schema': {'type': 'integer', 'title': 'Stop Id'}}], 'responses': {'200': {'description': 'Successful Response', 'content': {'application/json': {'schema': {'$ref': '#/components/schemas/Stop'}}}}, '404': {'description': 'Not found.'}, '422': {'description': 'Validation Error', 'content': {'application/json': {'schema': {'$ref': '#/components/schemas/HTTPValidationError'}}}}}}, 'patch': {'tags': ['vehicles'], 'summary': 'Update Driver Stop', 'operationId': 'update_driver_stop_api_v1_vehicles_stops__stop_id__patch', 'security': [{'JWTBearer': []}, {'JWTBearer': []}], 'parameters': [{'name': 'stop_id', 'in': 'path', 'required': True, 'schema': {'type': 'integer', 'title': 'Stop Id'}}], 'requestBody': {'required': True, 'content': {'application/json': {'schema': {'$ref': '#/components/schemas/StopUpdate'}}}}, 'responses': {'200': {'description': 'Successful Response', 'content': {'application/json': {'schema': {'$ref': '#/components/schemas/Stop'}}}}, '404': {'description': 'Not found.'}, '422': {'description': 'Validation Error', 'content': {'application/json': {'schema': {'$ref': '#/components/schemas/HTTPValidationError'}}}}}}, 'delete': {'tags': ['vehicles'], 'summary': 'Delete Driver Stop', 'operationId': 'delete_driver_stop_api_v1_vehicles_stops__stop_id__delete', 'security': [{'JWTBearer': []}, {'JWTBearer': []}], 'parameters': [{'name': 'stop_id', 'in': 'path', 'required': True, 'schema': {'type': 'integer', 'title': 'Stop Id'}}], 'responses': {'200': {'description': 'Successful Response', 'content': {'application/json': {'schema': {}}}}, '404': {'description': 'Not found.'}, '422': {'description': 'Validation Error', 'content': {'application/json': {'schema': {'$ref': '#/components/schemas/HTTPValidationError'}}}}}}}, '/api/v1/vehicles/stops': {'post': {'tags': ['vehicles'], 'summary': 'Create Driver Stop', 'operationId': 'create_driver_stop_api_v1_vehicles_stops_post', 'requestBody': {'content': {'application/json': {'schema': {'$ref': '#/components/schemas/StopCreate'}}}, 'required': True}, 'responses': {'200': {'description': 'Successful Response', 'content': {'application/json': {'schema': {'$ref': '#/components/schemas/Stop'}}}}, '404': {'description': 'Not found.'}, '422': {'description': 'Validation Error', 'content': {'application/json': {'schema': {'$ref': '#/components/schemas/HTTPValidationError'}}}}}, 'security': [{'JWTBearer': []}, {'JWTBearer': []}]}}, '/api/v1/vehicles': {'get': {'tags': ['vehicles'], 'summary': 'List Vehicles', 'operationId': 'list_vehicles_api_v1_vehicles_get', 'responses': {'200': {'description': 'Successful Response', 'content': {'application/json': {'schema': {'$ref': '#/components/schemas/VehicleList'}}}}, '404': {'description': 'Not found.'}}, 'security': [{'JWTBearer': []}]}, 'post': {'tags': ['vehicles'], 'summary': 'Create Vehicle', 'operationId': 'create_vehicle_api_v1_vehicles_post', 'requestBody': {'content': {'application/json': {'schema': {'$ref': '#/components/schemas/VehicleCreate'}}}, 'required': True}, 'responses': {'201': {'description': 'Successful Response', 'content': {'application/json': {'schema': {'$ref': '#/components/schemas/Vehicle'}}}}, '404': {'description': 'Not found.'}, '422': {'description': 'Validation Error', 'content': {'application/json': {'schema': {'$ref': '#/components/schemas/HTTPValidationError'}}}}}, 'security': [{'JWTBearer': []}, {'JWTBearer': []}]}}, '/api/v1/vehicles/available': {'get': {'tags': ['vehicles'], 'summary': 'List Available Vehicles', 'operationId': 'list_available_vehicles_api_v1_vehicles_available_get', 'security': [{'JWTBearer': []}], 'parameters': [{'name': 'start', 'in': 'query', 'required': True, 'schema': {'type': 'string', 'format': 'time', 'title': 'Start'}}, {'name': 'end', 'in': 'query', 'required': True, 'schema': {'type': 'string', 'format': 'time', 'title': 'End'}}, {'name': 'tour_date', 'in': 'query', 'required': True, 'schema': {'type': 'string', 'format': 'date', 'title': 'Tour Date'}}], 'responses': {'200': {'description': 'Successful Response', 'content': {'application/json': {'schema': {'$ref': '#/components/schemas/VehicleList'}}}}, '404': {'description': 'Not found.'}, '422': {'description': 'Validation Error', 'content': {'application/json': {'schema': {'$ref': '#/components/schemas/HTTPValidationError'}}}}}}}, '/api/v1/vehicles/{plate}': {'get': {'tags': ['vehicles'], 'summary': 'Get Vehicle', 'operationId': 'get_vehicle_api_v1_vehicles__plate__get', 'security': [{'JWTBearer': []}], 'parameters': [{'name': 'plate', 'in': 'path', 'required': True, 'schema': {'type': 'string', 'title': 'Plate'}}], 'responses': {'200': {'description': 'Successful Response', 'content': {'application/json': {'schema': {'$ref': '#/components/schemas/Vehicle'}}}}, '404': {'description': 'Not found.'}, '422': {'description': 'Validation Error', 'content': {'application/json': {'schema': {'$ref': '#/components/schemas/HTTPValidationError'}}}}}}, 'patch': {'tags': ['vehicles'], 'summary': 'Update Vehicle', 'operationId': 'update_vehicle_api_v1_vehicles__plate__patch', 'security': [{'JWTBearer': []}, {'JWTBearer': []}], 'parameters': [{'name': 'plate', 'in': 'path', 'required': True, 'schema': {'type': 'string', 'minLength': 7, 'maxLength': 12, 'title': 'Plate'}}], 'requestBody': {'required': True, 'content': {'application/json': {'schema': {'$ref': '#/components/schemas/VehicleUpdate'}}}}, 'responses': {'200': {'description': 'Successful Response', 'content': {'application/json': {'schema': {'$ref': '#/components/schemas/Vehicle'}}}}, '404': {'description': 'Not found.'}, '422': {'description': 'Validation Error', 'content': {'application/json': {'schema': {'$ref': '#/components/schemas/HTTPValidationError'}}}}}}, 'delete': {'tags': ['vehicles'], 'summary': 'Delete Vehicle', 'operationId': 'delete_vehicle_api_v1_vehicles__plate__delete', 'security': [{'JWTBearer': []}, {'JWTBearer': []}], 'parameters': [{'name': 'plate', 'in': 'path', 'required': True, 'schema': {'type': 'string', 'minLength': 7, 'maxLength': 12, 'title': 'Plate'}}], 'responses': {'200': {'description': 'Successful Response', 'content': {'application/json': {'schema': {}}}}, '404': {'description': 'Not found.'}, '422': {'description': 'Validation Error', 'content': {'application/json': {'schema': {'$ref': '#/components/schemas/HTTPValidationError'}}}}}}}, '/api/v1/employees/stops/by-driver/{driver_uid}': {'get': {'tags': ['employees'], 'summary': 'List Driver Stops', 'operationId': 'list_driver_stops_api_v1_employees_stops_by_driver__driver_uid__get', 'security': [{'JWTBearer': []}], 'parameters': [{'name': 'driver_uid', 'in': 'path', 'required': True, 'schema': {'type': 'string', 'format': 'uuid', 'title': 'Driver Uid'}}, {'name': 'start_datetime_from', 'in': 'query', 'required': False, 'schema': {'anyOf': [{'type': 'string', 'format': 'date-time'}, {'type': 'null'}], 'title': 'Start Datetime From'}}, {'name': 'start_datetime_to', 'in': 'query', 'required': False, 'schema': {'anyOf': [{'type': 'string', 'format': 'date-time'}, {'type': 'null'}], 'title': 'Start Datetime To'}}, {'name': 'end_datetime_from', 'in': 'query', 'required': False, 'schema': {'anyOf': [{'type': 'string', 'format': 'date-time'}, {'type': 'null'}], 'title': 'End Datetime From'}}, {'name': 'end_datetime_to', 'in': 'query', 'required': False, 'schema': {'anyOf': [{'type': 'string', 'format': 'date-time'}, {'type': 'null'}], 'title': 'End Datetime To'}}, {'name': 'limit', 'in': 'query', 'required': False, 'schema': {'anyOf': [{'type': 'integer'}, {'type': 'null'}], 'title': 'Limit'}}, {'name': 'filters', 'in': 'query', 'required': False, 'schema': {'type': 'array', 'items': {'$ref': '#/components/schemas/StopTypeEnum'}, 'default': [], 'title': 'Filters'}}], 'responses': {'200': {'description': 'Successful Response', 'content': {'application/json': {'schema': {'type': 'array', 'items': {'$ref': '#/components/schemas/Stop'}, 'title': 'Response List Driver Stops Api V1 Employees Stops By Driver  Driver Uid  Get'}}}}, '404': {'description': 'Not found.'}, '422': {'description': 'Validation Error', 'content': {'application/json': {'schema': {'$ref': '#/components/schemas/HTTPValidationError'}}}}}}}, '/api/v1/employees/stops/{stop_id}': {'get': {'tags': ['employees'], 'summary': 'Get Stop', 'operationId': 'get_stop_api_v1_employees_stops__stop_id__get', 'security': [{'JWTBearer': []}], 'parameters': [{'name': 'stop_id', 'in': 'path', 'required': True, 'schema': {'type': 'integer', 'title': 'Stop Id'}}], 'responses': {'200': {'description': 'Successful Response', 'content': {'application/json': {'schema': {'$ref': '#/components/schemas/Stop'}}}}, '404': {'description': 'Not found.'}, '422': {'description': 'Validation Error', 'content': {'application/json': {'schema': {'$ref': '#/components/schemas/HTTPValidationError'}}}}}}, 'patch': {'tags': ['employees'], 'summary': 'Update Driver Stop', 'operationId': 'update_driver_stop_api_v1_employees_stops__stop_id__patch', 'security': [{'JWTBearer': []}, {'JWTBearer': []}], 'parameters': [{'name': 'stop_id', 'in': 'path', 'required': True, 'schema': {'type': 'integer', 'title': 'Stop Id'}}], 'requestBody': {'required': True, 'content': {'application/json': {'schema': {'$ref': '#/components/schemas/StopUpdate'}}}}, 'responses': {'200': {'description': 'Successful Response', 'content': {'application/json': {'schema': {'$ref': '#/components/schemas/Stop'}}}}, '404': {'description': 'Not found.'}, '422': {'description': 'Validation Error', 'content': {'application/json': {'schema': {'$ref': '#/components/schemas/HTTPValidationError'}}}}}}, 'delete': {'tags': ['employees'], 'summary': 'Delete Driver Stop', 'operationId': 'delete_driver_stop_api_v1_employees_stops__stop_id__delete', 'security': [{'JWTBearer': []}, {'JWTBearer': []}], 'parameters': [{'name': 'stop_id', 'in': 'path', 'required': True, 'schema': {'type': 'integer', 'title': 'Stop Id'}}], 'responses': {'200': {'description': 'Successful Response', 'content': {'application/json': {'schema': {}}}}, '404': {'description': 'Not found.'}, '422': {'description': 'Validation Error', 'content': {'application/json': {'schema': {'$ref': '#/components/schemas/HTTPValidationError'}}}}}}}, '/api/v1/employees/stops': {'post': {'tags': ['employees'], 'summary': 'Create Driver Stop', 'operationId': 'create_driver_stop_api_v1_employees_stops_post', 'requestBody': {'content': {'application/json': {'schema': {'$ref': '#/components/schemas/StopCreate'}}}, 'required': True}, 'responses': {'200': {'description': 'Successful Response', 'content': {'application/json': {'schema': {'$ref': '#/components/schemas/Stop'}}}}, '404': {'description': 'Not found.'}, '422': {'description': 'Validation Error', 'content': {'application/json': {'schema': {'$ref': '#/components/schemas/HTTPValidationError'}}}}}, 'security': [{'JWTBearer': []}, {'JWTBearer': []}]}}, '/api/v1/employees': {'get': {'tags': ['employees'], 'summary': 'List Employees', 'operationId': 'list_employees_api_v1_employees_get', 'security': [{'JWTBearer': []}], 'parameters': [{'name': 'active', 'in': 'query', 'required': False, 'schema': {'anyOf': [{'type': 'boolean'}, {'type': 'null'}], 'title': 'Active'}}], 'responses': {'200': {'description': 'Successful Response', 'content': {'application/json': {'schema': {'$ref': '#/components/schemas/EmployeesList'}}}}, '404': {'description': 'Not found.'}, '422': {'description': 'Validation Error', 'content': {'application/json': {'schema': {'$ref': '#/components/schemas/HTTPValidationError'}}}}}}, 'post': {'tags': ['employees'], 'summary': 'Create Employee', 'operationId': 'create_employee_api_v1_employees_post', 'security': [{'JWTBearer': []}, {'JWTBearer': []}], 'requestBody': {'required': True, 'content': {'application/json': {'schema': {'$ref': '#/components/schemas/EmployeeCreate'}}}}, 'responses': {'201': {'description': 'Successful Response', 'content': {'application/json': {'schema': {'$ref': '#/components/schemas/Employee'}}}}, '404': {'description': 'Not found.'}, '422': {'description': 'Validation Error', 'content': {'application/json': {'schema': {'$ref': '#/components/schemas/HTTPValidationError'}}}}}}}, '/api/v1/employees/search': {'get': {'tags': ['employees'], 'summary': 'Search Employees', 'operationId': 'search_employees_api_v1_employees_search_get', 'security': [{'JWTBearer': []}], 'parameters': [{'name': 'q', 'in': 'query', 'required': False, 'schema': {'anyOf': [{'type': 'string'}, {'type': 'null'}], 'title': 'Q'}}], 'responses': {'200': {'description': 'Successful Response', 'content': {'application/json': {'schema': {'$ref': '#/components/schemas/EmployeesList'}}}}, '404': {'description': 'Not found.'}, '422': {'description': 'Validation Error', 'content': {'application/json': {'schema': {'$ref': '#/components/schemas/HTTPValidationError'}}}}}}}, '/api/v1/employees/available': {'get': {'tags': ['employees'], 'summary': 'List Available Employees', 'operationId': 'list_available_employees_api_v1_employees_available_get', 'security': [{'JWTBearer': []}], 'parameters': [{'name': 'start', 'in': 'query', 'required': True, 'schema': {'type': 'string', 'format': 'time', 'title': 'Start'}}, {'name': 'end', 'in': 'query', 'required': True, 'schema': {'type': 'string', 'format': 'time', 'title': 'End'}}, {'name': 'tour_date', 'in': 'query', 'required': True, 'schema': {'type': 'string', 'format': 'date', 'title': 'Tour Date'}}, {'name': 'language_code', 'in': 'query', 'required': False, 'schema': {'anyOf': [{'type': 'string'}, {'type': 'null'}], 'title': 'Language Code'}}], 'responses': {'200': {'description': 'Successful Response', 'content': {'application/json': {'schema': {'$ref': '#/components/schemas/EmployeesList'}}}}, '404': {'description': 'Not found.'}, '422': {'description': 'Validation Error', 'content': {'application/json': {'schema': {'$ref': '#/components/schemas/HTTPValidationError'}}}}}}}, '/api/v1/employees/{employee_uid}': {'get': {'tags': ['employees'], 'summary': 'Get Employee', 'operationId': 'get_employee_api_v1_employees__employee_uid__get', 'security': [{'JWTBearer': []}], 'parameters': [{'name': 'employee_uid', 'in': 'path', 'required': True, 'schema': {'type': 'string', 'format': 'uuid', 'title': 'Employee Uid'}}], 'responses': {'200': {'description': 'Successful Response', 'content': {'application/json': {'schema': {'$ref': '#/components/schemas/Employee'}}}}, '404': {'description': 'Not found.'}, '422': {'description': 'Validation Error', 'content': {'application/json': {'schema': {'$ref': '#/components/schemas/HTTPValidationError'}}}}}}, 'patch': {'tags': ['employees'], 'summary': 'Update Employee', 'operationId': 'update_employee_api_v1_employees__employee_uid__patch', 'security': [{'JWTBearer': []}, {'JWTBearer': []}], 'parameters': [{'name': 'employee_uid', 'in': 'path', 'required': True, 'schema': {'type': 'string', 'format': 'uuid', 'title': 'Employee Uid'}}], 'requestBody': {'required': True, 'content': {'application/json': {'schema': {'$ref': '#/components/schemas/EmployeeUpdate'}}}}, 'responses': {'200': {'description': 'Successful Response', 'content': {'application/json': {'schema': {'$ref': '#/components/schemas/Employee'}}}}, '404': {'description': 'Not found.'}, '422': {'description': 'Validation Error', 'content': {'application/json': {'schema': {'$ref': '#/components/schemas/HTTPValidationError'}}}}}}, 'delete': {'tags': ['employees'], 'summary': 'Delete Employee', 'operationId': 'delete_employee_api_v1_employees__employee_uid__delete', 'security': [{'JWTBearer': []}, {'JWTBearer': []}], 'parameters': [{'name': 'employee_uid', 'in': 'path', 'required': True, 'schema': {'type': 'string', 'format': 'uuid', 'title': 'Employee Uid'}}], 'responses': {'200': {'description': 'Successful Response', 'content': {'application/json': {'schema': {}}}}, '404': {'description': 'Not found.'}, '422': {'description': 'Validation Error', 'content': {'application/json': {'schema': {'$ref': '#/components/schemas/HTTPValidationError'}}}}}}}, '/api/v1/reservations/tour_days/lock/{tour_day_id}': {'patch': {'tags': ['reservations'], 'summary': 'Lock Tour Day', 'operationId': 'lock_tour_day_api_v1_reservations_tour_days_lock__tour_day_id__patch', 'security': [{'JWTBearer': []}], 'parameters': [{'name': 'tour_day_id', 'in': 'path', 'required': True, 'schema': {'type': 'integer', 'title': 'Tour Day Id'}}, {'name': 'value', 'in': 'query', 'required': True, 'schema': {'type': 'boolean', 'title': 'Value'}}], 'responses': {'200': {'description': 'Successful Response', 'content': {'application/json': {'schema': {}}}}, '404': {'description': 'Not found.'}, '422': {'description': 'Validation Error', 'content': {'application/json': {'schema': {'$ref': '#/components/schemas/HTTPValidationError'}}}}}}}, '/api/v1/reservations/tour_days/cancel/{tour_day_id}': {'patch': {'tags': ['reservations'], 'summary': 'Cancel', 'operationId': 'cancel_api_v1_reservations_tour_days_cancel__tour_day_id__patch', 'security': [{'JWTBearer': []}, {'JWTBearer': []}], 'parameters': [{'name': 'tour_day_id', 'in': 'path', 'required': True, 'schema': {'type': 'integer', 'title': 'Tour Day Id'}}], 'responses': {'200': {'description': 'Successful Response', 'content': {'application/json': {'schema': {}}}}, '404': {'description': 'Not found.'}, '422': {'description': 'Validation Error', 'content': {'application/json': {'schema': {'$ref': '#/components/schemas/HTTPValidationError'}}}}}}}, '/api/v1/reservations/tour_days/{tour_day_id}': {'get': {'tags': ['reservations'], 'summary': 'Get Tour Day', 'operationId': 'get_tour_day_api_v1_reservations_tour_days__tour_day_id__get', 'security': [{'JWTBearer': []}], 'parameters': [{'name': 'tour_day_id', 'in': 'path', 'required': True, 'schema': {'type': 'integer', 'title': 'Tour Day Id'}}], 'responses': {'200': {'description': 'Successful Response', 'content': {'application/json': {'schema': {'$ref': '#/components/schemas/TourDay'}}}}, '404': {'description': 'Not found.'}, '422': {'description': 'Validation Error', 'content': {'application/json': {'schema': {'$ref': '#/components/schemas/HTTPValidationError'}}}}}}, 'patch': {'tags': ['reservations'], 'summary': 'Update Tour Day', 'operationId': 'update_tour_day_api_v1_reservations_tour_days__tour_day_id__patch', 'security': [{'JWTBearer': []}], 'parameters': [{'name': 'tour_day_id', 'in': 'path', 'required': True, 'schema': {'type': 'integer', 'title': 'Tour Day Id'}}], 'requestBody': {'required': True, 'content': {'application/json': {'schema': {'$ref': '#/components/schemas/TourDayUpdate'}}}}, 'responses': {'200': {'description': 'Successful Response', 'content': {'application/json': {'schema': {}}}}, '404': {'description': 'Not found.'}, '422': {'description': 'Validation Error', 'content': {'application/json': {'schema': {'$ref': '#/components/schemas/HTTPValidationError'}}}}}}}, '/api/v1/reservations/tour_days/multiple/{tour_day_id}': {'get': {'tags': ['reservations'], 'summary': 'Get Multiple Tour Days', 'operationId': 'get_multiple_tour_days_api_v1_reservations_tour_days_multiple__tour_day_id__get', 'security': [{'JWTBearer': []}], 'parameters': [{'name': 'tour_day_id', 'in': 'path', 'required': True, 'schema': {'type': 'integer', 'title': 'Tour Day Id'}}], 'responses': {'200': {'description': 'Successful Response', 'content': {'application/json': {'schema': {'$ref': '#/components/schemas/TourDayList'}}}}, '404': {'description': 'Not found.'}, '422': {'description': 'Validation Error', 'content': {'application/json': {'schema': {'$ref': '#/components/schemas/HTTPValidationError'}}}}}}}, '/api/v1/reservations': {'post': {'tags': ['reservations'], 'summary': 'Create Reservation', 'operationId': 'create_reservation_api_v1_reservations_post', 'security': [{'JWTBearer': []}, {'JWTBearer': []}, {'JWTBearer': []}], 'requestBody': {'required': True, 'content': {'application/json': {'schema': {'$ref': '#/components/schemas/ReservationCreate'}}}}, 'responses': {'201': {'description': 'Successful Response', 'content': {'application/json': {'schema': {'$ref': '#/components/schemas/Reservation'}}}}, '404': {'description': 'Not found.'}, '422': {'description': 'Validation Error', 'content': {'application/json': {'schema': {'$ref': '#/components/schemas/HTTPValidationError'}}}}}}, 'get': {'tags': ['reservations'], 'summary': 'List Reservations', 'operationId': 'list_reservations_api_v1_reservations_get', 'security': [{'JWTBearer': []}], 'parameters': [{'name': 'year', 'in': 'query', 'required': True, 'schema': {'type': 'integer', 'title': 'Year'}}], 'responses': {'200': {'description': 'Successful Response', 'content': {'application/json': {'schema': {'$ref': '#/components/schemas/ReservationList'}}}}, '404': {'description': 'Not found.'}, '422': {'description': 'Validation Error', 'content': {'application/json': {'schema': {'$ref': '#/components/schemas/HTTPValidationError'}}}}}}}, '/api/v1/reservations/by-date/{tour_date}': {'get': {'tags': ['reservations'], 'summary': 'Get Reservations By Date', 'operationId': 'get_reservations_by_date_api_v1_reservations_by_date__tour_date__get', 'security': [{'JWTBearer': []}], 'parameters': [{'name': 'tour_date', 'in': 'path', 'required': True, 'schema': {'type': 'string', 'format': 'date', 'title': 'Tour Date'}}, {'name': 'filters', 'in': 'query', 'required': False, 'schema': {'type': 'array', 'items': {'$ref': '#/components/schemas/ListReservationFiltersEnum'}, 'default': [], 'title': 'Filters'}}], 'responses': {'200': {'description': 'Successful Response', 'content': {'application/json': {'schema': {'$ref': '#/components/schemas/TourDayList'}}}}, '404': {'description': 'Not found.'}, '422': {'description': 'Validation Error', 'content': {'application/json': {'schema': {'$ref': '#/components/schemas/HTTPValidationError'}}}}}}}, '/api/v1/reservations/count-by-filter': {'get': {'tags': ['reservations'], 'summary': 'Get Count By Filter', 'operationId': 'get_count_by_filter_api_v1_reservations_count_by_filter_get', 'security': [{'JWTBearer': []}], 'parameters': [{'name': 'tour_date', 'in': 'query', 'required': True, 'schema': {'type': 'string', 'format': 'date', 'title': 'Tour Date'}}], 'responses': {'200': {'description': 'Successful Response', 'content': {'application/json': {'schema': {'$ref': '#/components/schemas/TourDaysCountByFilterSchema'}}}}, '404': {'description': 'Not found.'}, '422': {'description': 'Validation Error', 'content': {'application/json': {'schema': {'$ref': '#/components/schemas/HTTPValidationError'}}}}}}}, '/api/v1/reservations/{reservation_id}': {'get': {'tags': ['reservations'], 'summary': 'Get Reservation', 'operationId': 'get_reservation_api_v1_reservations__reservation_id__get', 'security': [{'JWTBearer': []}], 'parameters': [{'name': 'reservation_id', 'in': 'path', 'required': True, 'schema': {'type': 'integer', 'title': 'Reservation Id'}}], 'responses': {'200': {'description': 'Successful Response', 'content': {'application/json': {'schema': {'$ref': '#/components/schemas/Reservation'}}}}, '404': {'description': 'Not found.'}, '422': {'description': 'Validation Error', 'content': {'application/json': {'schema': {'$ref': '#/components/schemas/HTTPValidationError'}}}}}}}, '/api/v1/reservations/lock/{reservation_id}': {'patch': {'tags': ['reservations'], 'summary': 'Lock Reservation', 'operationId': 'lock_reservation_api_v1_reservations_lock__reservation_id__patch', 'security': [{'JWTBearer': []}, {'JWTBearer': []}], 'parameters': [{'name': 'reservation_id', 'in': 'path', 'required': True, 'schema': {'type': 'integer', 'title': 'Reservation Id'}}, {'name': 'value', 'in': 'query', 'required': True, 'schema': {'type': 'boolean', 'title': 'Value'}}], 'responses': {'200': {'description': 'Successful Response', 'content': {'application/json': {'schema': {'$ref': '#/components/schemas/Reservation'}}}}, '404': {'description': 'Not found.'}, '422': {'description': 'Validation Error', 'content': {'application/json': {'schema': {'$ref': '#/components/schemas/HTTPValidationError'}}}}}}}, '/api/v1/users': {'get': {'tags': ['users'], 'summary': 'List Users', 'description': 'Retrieve all users.\n\nReturns:\n    UserSchema: The list of users.', 'operationId': 'list_users_api_v1_users_get', 'responses': {'200': {'description': 'Successful Response', 'content': {'application/json': {'schema': {'$ref': '#/components/schemas/UserList'}}}}, '404': {'description': 'Not found.'}}, 'security': [{'JWTBearer': []}]}}, '/api/v1/users/current': {'get': {'tags': ['users'], 'summary': 'Get Current', 'operationId': 'get_current_api_v1_users_current_get', 'responses': {'200': {'description': 'Successful Response', 'content': {'application/json': {'schema': {'$ref': '#/components/schemas/User'}}}}, '404': {'description': 'Not found.'}}, 'security': [{'JWTBearer': []}]}}, '/api/v1/users/{sub}': {'get': {'tags': ['users'], 'summary': 'Get User', 'description': "Retrieve a user by their email address.\n\nArgs:\n    user_email (str): The user's email.\n\nReturns:\n    UserSchema: The user.", 'operationId': 'get_user_api_v1_users__sub__get', 'security': [{'JWTBearer': []}], 'parameters': [{'name': 'sub', 'in': 'path', 'required': True, 'schema': {'type': 'string', 'title': 'Sub'}}], 'responses': {'200': {'description': 'Successful Response', 'content': {'application/json': {'schema': {'$ref': '#/components/schemas/User'}}}}, '404': {'description': 'Not found.'}, '422': {'description': 'Validation Error', 'content': {'application/json': {'schema': {'$ref': '#/components/schemas/HTTPValidationError'}}}}}}}, '/api/v1/services/types': {'get': {'tags': ['services'], 'summary': 'List Service Types', 'operationId': 'list_service_types_api_v1_services_types_get', 'responses': {'200': {'description': 'Successful Response', 'content': {'application/json': {'schema': {'$ref': '#/components/schemas/ServiceTypeList'}}}}, '404': {'description': 'Not found.'}}, 'security': [{'JWTBearer': []}]}, 'post': {'tags': ['services'], 'summary': 'Create Service Type', 'operationId': 'create_service_type_api_v1_services_types_post', 'requestBody': {'content': {'application/json': {'schema': {'$ref': '#/components/schemas/ServiceTypeCreate'}}}, 'required': True}, 'responses': {'201': {'description': 'Successful Response', 'content': {'application/json': {'schema': {'$ref': '#/components/schemas/ServiceType'}}}}, '404': {'description': 'Not found.'}, '422': {'description': 'Validation Error', 'content': {'application/json': {'schema': {'$ref': '#/components/schemas/HTTPValidationError'}}}}}, 'security': [{'JWTBearer': []}, {'JWTBearer': []}]}}, '/api/v1/services/types/{service_type_id}': {'get': {'tags': ['services'], 'summary': 'Get Service Type By Id', 'operationId': 'get_service_type_by_id_api_v1_services_types__service_type_id__get', 'security': [{'JWTBearer': []}], 'parameters': [{'name': 'service_type_id', 'in': 'path', 'required': True, 'schema': {'type': 'integer', 'title': 'Service Type Id'}}], 'responses': {'200': {'description': 'Successful Response', 'content': {'application/json': {'schema': {'$ref': '#/components/schemas/ServiceType'}}}}, '404': {'description': 'Not found.'}, '422': {'description': 'Validation Error', 'content': {'application/json': {'schema': {'$ref': '#/components/schemas/HTTPValidationError'}}}}}}, 'patch': {'tags': ['services'], 'summary': 'Update Service Type', 'operationId': 'update_service_type_api_v1_services_types__service_type_id__patch', 'security': [{'JWTBearer': []}, {'JWTBearer': []}], 'parameters': [{'name': 'service_type_id', 'in': 'path', 'required': True, 'schema': {'type': 'integer', 'title': 'Service Type Id'}}], 'requestBody': {'required': True, 'content': {'application/json': {'schema': {'$ref': '#/components/schemas/ServiceTypeUpdate'}}}}, 'responses': {'200': {'description': 'Successful Response', 'content': {'application/json': {'schema': {'$ref': '#/components/schemas/ServiceType'}}}}, '404': {'description': 'Not found.'}, '422': {'description': 'Validation Error', 'content': {'application/json': {'schema': {'$ref': '#/components/schemas/HTTPValidationError'}}}}}}, 'delete': {'tags': ['services'], 'summary': 'Delete Service Type', 'operationId': 'delete_service_type_api_v1_services_types__service_type_id__delete', 'security': [{'JWTBearer': []}, {'JWTBearer': []}], 'parameters': [{'name': 'service_type_id', 'in': 'path', 'required': True, 'schema': {'type': 'integer', 'title': 'Service Type Id'}}], 'responses': {'200': {'description': 'Successful Response', 'content': {'application/json': {'schema': {}}}}, '404': {'description': 'Not found.'}, '422': {'description': 'Validation Error', 'content': {'application/json': {'schema': {'$ref': '#/components/schemas/HTTPValidationError'}}}}}}}, '/api/v1/services': {'get': {'tags': ['services'], 'summary': 'List Services', 'operationId': 'list_services_api_v1_services_get', 'responses': {'200': {'description': 'Successful Response', 'content': {'application/json': {'schema': {'$ref': '#/components/schemas/ServiceList'}}}}, '404': {'description': 'Not found.'}}, 'security': [{'JWTBearer': []}]}, 'post': {'tags': ['services'], 'summary': 'Create Service', 'operationId': 'create_service_api_v1_services_post', 'requestBody': {'content': {'application/json': {'schema': {'$ref': '#/components/schemas/ServiceCreate'}}}, 'required': True}, 'responses': {'201': {'description': 'Successful Response', 'content': {'application/json': {'schema': {'$ref': '#/components/schemas/Service'}}}}, '404': {'description': 'Not found.'}, '422': {'description': 'Validation Error', 'content': {'application/json': {'schema': {'$ref': '#/components/schemas/HTTPValidationError'}}}}}, 'security': [{'JWTBearer': []}, {'JWTBearer': []}]}}, '/api/v1/services/{service_id}': {'get': {'tags': ['services'], 'summary': 'Get Service By Id', 'operationId': 'get_service_by_id_api_v1_services__service_id__get', 'security': [{'JWTBearer': []}], 'parameters': [{'name': 'service_id', 'in': 'path', 'required': True, 'schema': {'type': 'integer', 'title': 'Service Id'}}], 'responses': {'200': {'description': 'Successful Response', 'content': {'application/json': {'schema': {'$ref': '#/components/schemas/Service'}}}}, '404': {'description': 'Not found.'}, '422': {'description': 'Validation Error', 'content': {'application/json': {'schema': {'$ref': '#/components/schemas/HTTPValidationError'}}}}}}, 'patch': {'tags': ['services'], 'summary': 'Update Service', 'operationId': 'update_service_api_v1_services__service_id__patch', 'security': [{'JWTBearer': []}, {'JWTBearer': []}], 'parameters': [{'name': 'service_id', 'in': 'path', 'required': True, 'schema': {'type': 'integer', 'title': 'Service Id'}}], 'requestBody': {'required': True, 'content': {'application/json': {'schema': {'$ref': '#/components/schemas/ServiceUpdate'}}}}, 'responses': {'200': {'description': 'Successful Response', 'content': {'application/json': {'schema': {'$ref': '#/components/schemas/Service'}}}}, '404': {'description': 'Not found.'}, '422': {'description': 'Validation Error', 'content': {'application/json': {'schema': {'$ref': '#/components/schemas/HTTPValidationError'}}}}}}, 'delete': {'tags': ['services'], 'summary': 'Delete Service', 'operationId': 'delete_service_api_v1_services__service_id__delete', 'security': [{'JWTBearer': []}, {'JWTBearer': []}], 'parameters': [{'name': 'service_id', 'in': 'path', 'required': True, 'schema': {'type': 'integer', 'title': 'Service Id'}}], 'responses': {'200': {'description': 'Successful Response', 'content': {'application/json': {'schema': {}}}}, '404': {'description': 'Not found.'}, '422': {'description': 'Validation Error', 'content': {'application/json': {'schema': {'$ref': '#/components/schemas/HTTPValidationError'}}}}}}}, '/api/v1/services/deactivate/{service_id}': {'patch': {'tags': ['services'], 'summary': 'Deactivate Service', 'operationId': 'deactivate_service_api_v1_services_deactivate__service_id__patch', 'security': [{'JWTBearer': []}, {'JWTBearer': []}], 'parameters': [{'name': 'service_id', 'in': 'path', 'required': True, 'schema': {'type': 'integer', 'title': 'Service Id'}}], 'responses': {'200': {'description': 'Successful Response', 'content': {'application/json': {'schema': {'$ref': '#/components/schemas/Service'}}}}, '404': {'description': 'Not found.'}, '422': {'description': 'Validation Error', 'content': {'application/json': {'schema': {'$ref': '#/components/schemas/HTTPValidationError'}}}}}}}, '/auth/login': {'post': {'tags': ['Auth'], 'summary': 'Login', 'operationId': 'login_auth_login_post', 'parameters': [{'name': 'sub', 'in': 'query', 'required': True, 'schema': {'type': 'string', 'title': 'Sub'}}], 'responses': {'200': {'description': 'Successful Response', 'content': {'application/json': {'schema': {'$ref': '#/components/schemas/UserWithTokens'}}}}, '422': {'description': 'Validation Error', 'content': {'application/json': {'schema': {'$ref': '#/components/schemas/HTTPValidationError'}}}}}}}, '/auth/login-with-google': {'post': {'tags': ['Auth'], 'summary': 'Login With Google', 'description': "Logs a user in using Google Identity Services sign in.\n\nReceives the token, retrieves the user's sub from it, then looks up\nthe sub in the user's table. If no user is found, a new one is\ncreated.\n\nArgs:\n    session (SessionLocal): The DB session.\n    user (UserSchema): The user info decoded from the token.\n\nReturns:\n    UserwithTokens: The user from the DB and a pair of\n        token, refresh token.", 'operationId': 'login_with_google_auth_login_with_google_post', 'requestBody': {'content': {'application/json': {'schema': {'$ref': '#/components/schemas/Token'}}}, 'required': True}, 'responses': {'200': {'description': 'Successful Response', 'content': {'application/json': {'schema': {'$ref': '#/components/schemas/UserWithTokens'}}}}, '422': {'description': 'Validation Error', 'content': {'application/json': {'schema': {'$ref': '#/components/schemas/HTTPValidationError'}}}}}}}, '/auth/logout': {'post': {'tags': ['Auth'], 'summary': 'Logout', 'operationId': 'logout_auth_logout_post', 'responses': {'200': {'description': 'Successful Response', 'content': {'application/json': {'schema': {}}}}}, 'security': [{'JWTBearer': []}]}}, '/auth/refresh-token': {'post': {'tags': ['Auth'], 'summary': 'Refresh Token', 'operationId': 'refresh_token_auth_refresh_token_post', 'requestBody': {'content': {'application/json': {'schema': {'$ref': '#/components/schemas/RefreshToken'}}}, 'required': True}, 'responses': {'200': {'description': 'Successful Response', 'content': {'application/json': {'schema': {'$ref': '#/components/schemas/TokenResponse'}}}}, '422': {'description': 'Validation Error', 'content': {'application/json': {'schema': {'$ref': '#/components/schemas/HTTPValidationError'}}}}}, 'security': [{'JWTBearer': []}]}}, '/auth/get-code': {'post': {'tags': ['Auth'], 'summary': 'Get Code', 'operationId': 'get_code_auth_get_code_post', 'requestBody': {'content': {'application/json': {'schema': {'type': 'object', 'title': 'Payload'}}}, 'required': True}, 'responses': {'200': {'description': 'Successful Response', 'content': {'application/json': {'schema': {'type': 'string', 'enum': ['OK'], 'const': 'OK', 'title': 'Response Get Code Auth Get Code Post'}}}}, '422': {'description': 'Validation Error', 'content': {'application/json': {'schema': {'$ref': '#/components/schemas/HTTPValidationError'}}}}}, 'security': [{'JWTBearer': []}]}}, '/auth': {'post': {'tags': ['Auth'], 'summary': 'Create User', 'operationId': 'create_user_auth_post', 'requestBody': {'content': {'application/json': {'schema': {'$ref': '#/components/schemas/UserCreate'}}}, 'required': True}, 'responses': {'201': {'description': 'Successful Response', 'content': {'application/json': {'schema': {'$ref': '#/components/schemas/User'}}}}, '422': {'description': 'Validation Error', 'content': {'application/json': {'schema': {'$ref': '#/components/schemas/HTTPValidationError'}}}}}}}, '/languages': {'get': {'summary': 'List Languages', 'operationId': 'list_languages_languages_get', 'responses': {'200': {'description': 'Successful Response', 'content': {'application/json': {'schema': {'$ref': '#/components/schemas/Languages'}}}}}}}, '/languages/by-code/{language_code}': {'get': {'summary': 'Get Language By Code', 'operationId': 'get_language_by_code_languages_by_code__language_code__get', 'parameters': [{'name': 'language_code', 'in': 'path', 'required': True, 'schema': {'type': 'string', 'title': 'Language Code'}}], 'responses': {'200': {'description': 'Successful Response', 'content': {'application/json': {'schema': {'$ref': '#/components/schemas/Language'}}}}, '422': {'description': 'Validation Error', 'content': {'application/json': {'schema': {'$ref': '#/components/schemas/HTTPValidationError'}}}}}}}, '/': {'get': {'summary': 'Ping', 'operationId': 'ping__get', 'responses': {'200': {'description': 'Successful Response', 'content': {'application/json': {'schema': {'type': 'string', 'enum': ['pong'], 'const': 'pong', 'title': 'Response Ping  Get'}}}}}}}}, 'components': {'schemas': {'AgeRangeEnum': {'type': 'string', 'enum': ['adult', 'teenager', 'child', 'toddler'], 'title': 'AgeRangeEnum', 'description': "Enum for a person's age range."}, 'Battery': {'properties': {'brand': {'type': 'string', 'title': 'Brand'}, 'model': {'type': 'string', 'title': 'Model'}, 'tachnology': {'$ref': '#/components/schemas/BatteryTypeEnum'}, 'id': {'type': 'integer', 'title': 'Id'}}, 'type': 'object', 'required': ['brand', 'model', 'tachnology', 'id'], 'title': 'Battery'}, 'BatteryTypeEnum': {'type': 'string', 'enum': ['acid', 'lithium'], 'title': 'BatteryTypeEnum'}, 'Country': {'properties': {'code': {'type': 'string', 'title': 'Code'}, 'name': {'type': 'string', 'title': 'Name'}, 'currency': {'type': 'string', 'title': 'Currency'}}, 'type': 'object', 'required': ['code', 'name', 'currency'], 'title': 'Country'}, 'CurrencyEnum': {'type': 'string', 'enum': ['EUR', 'GBP', 'RUB', 'USD', 'YEN'], 'title': 'CurrencyEnum', 'description': 'Enum for currencies.'}, 'Customer': {'properties': {'email': {'type': 'string', 'format': 'email', 'title': 'Email'}, 'email_verified': {'type': 'boolean', 'title': 'Email Verified', 'default': False}, 'sub': {'anyOf': [{'type': 'string'}, {'type': 'null'}], 'title': 'Sub'}, 'given_name': {'type': 'string', 'title': 'Given Name'}, 'family_name': {'type': 'string', 'title': 'Family Name'}, 'middle_name': {'type': 'string', 'title': 'Middle Name'}, 'nickname': {'type': 'string', 'title': 'Nickname'}, 'date_of_birth': {'type': 'string', 'format': 'date', 'title': 'Date Of Birth'}, 'gender': {'$ref': '#/components/schemas/GenderEnum', 'default': 'unknown'}, 'picture': {'type': 'string', 'title': 'Picture'}, 'password': {'type': 'string', 'format': 'password', 'title': 'Password', 'writeOnly': True}, 'uid': {'type': 'string', 'format': 'uuid', 'title': 'Uid'}, 'active': {'type': 'boolean', 'title': 'Active', 'default': True}, 'role': {'$ref': '#/components/schemas/Role'}, 'country': {'anyOf': [{'$ref': '#/components/schemas/Country'}, {'type': 'null'}]}, 'websites': {'items': {'$ref': '#/components/schemas/Website'}, 'type': 'array', 'title': 'Websites'}, 'emails': {'items': {'$ref': '#/components/schemas/Email'}, 'type': 'array', 'title': 'Emails'}, 'phone_numbers': {'items': {'$ref': '#/components/schemas/PhoneNumber'}, 'type': 'array', 'title': 'Phone Numbers'}, 'reservations': {'items': {'$ref': '#/components/schemas/Reservation'}, 'type': 'array', 'title': 'Reservations'}}, 'type': 'object', 'required': ['uid', 'role', 'country', 'websites', 'emails', 'phone_numbers', 'reservations'], 'title': 'Customer'}, 'CustomerCreate': {'properties': {'websites': {'items': {'$ref': '#/components/schemas/Website'}, 'type': 'array', 'title': 'Websites', 'default': []}, 'emails': {'items': {'$ref': '#/components/schemas/Email'}, 'type': 'array', 'title': 'Emails', 'default': []}, 'phone_numbers': {'items': {'$ref': '#/components/schemas/PhoneNumber'}, 'type': 'array', 'title': 'Phone Numbers', 'default': []}, 'email': {'type': 'string', 'format': 'email', 'title': 'Email'}, 'email_verified': {'type': 'boolean', 'title': 'Email Verified', 'default': False}, 'sub': {'anyOf': [{'type': 'string'}, {'type': 'null'}], 'title': 'Sub'}, 'given_name': {'type': 'string', 'title': 'Given Name'}, 'family_name': {'type': 'string', 'title': 'Family Name'}, 'middle_name': {'type': 'string', 'title': 'Middle Name'}, 'nickname': {'type': 'string', 'title': 'Nickname'}, 'date_of_birth': {'type': 'string', 'format': 'date', 'title': 'Date Of Birth'}, 'gender': {'$ref': '#/components/schemas/GenderEnum', 'default': 'unknown'}, 'picture': {'type': 'string', 'title': 'Picture'}, 'password': {'type': 'string', 'format': 'password', 'title': 'Password', 'writeOnly': True}, 'age_range': {'$ref': '#/components/schemas/AgeRangeEnum', 'default': 'adult'}}, 'type': 'object', 'title': 'CustomerCreate'}, 'CustomerUpdate': {'properties': {'websites': {'items': {'$ref': '#/components/schemas/Website'}, 'type': 'array', 'title': 'Websites', 'default': []}, 'emails': {'items': {'$ref': '#/components/schemas/Email'}, 'type': 'array', 'title': 'Emails', 'default': []}, 'phone_numbers': {'items': {'$ref': '#/components/schemas/PhoneNumber'}, 'type': 'array', 'title': 'Phone Numbers', 'default': []}, 'email': {'type': 'string', 'format': 'email', 'title': 'Email'}, 'email_verified': {'type': 'boolean', 'title': 'Email Verified', 'default': False}, 'sub': {'anyOf': [{'type': 'string'}, {'type': 'null'}], 'title': 'Sub'}, 'given_name': {'type': 'string', 'title': 'Given Name'}, 'family_name': {'type': 'string', 'title': 'Family Name'}, 'middle_name': {'type': 'string', 'title': 'Middle Name'}, 'nickname': {'type': 'string', 'title': 'Nickname'}, 'date_of_birth': {'type': 'string', 'format': 'date', 'title': 'Date Of Birth'}, 'gender': {'$ref': '#/components/schemas/GenderEnum', 'default': 'unknown'}, 'picture': {'type': 'string', 'title': 'Picture'}, 'password': {'type': 'string', 'format': 'password', 'title': 'Password', 'writeOnly': True}, 'role_name': {'$ref': '#/components/schemas/RolesEnum', 'title': 'Role Name'}, 'refresh_token_uid': {'type': 'string', 'title': 'Refresh Token Uid'}, 'active': {'type': 'boolean', 'title': 'Active'}}, 'type': 'object', 'title': 'CustomerUpdate'}, 'Email': {'properties': {'name': {'type': 'string', 'title': 'Name', 'default': 'default'}, 'value': {'type': 'string', 'format': 'email', 'title': 'Value'}}, 'type': 'object', 'title': 'Email', 'description': 'Pydantic schema for user email addresses.'}, 'Employee': {'properties': {'email': {'type': 'string', 'format': 'email', 'title': 'Email'}, 'email_verified': {'type': 'boolean', 'title': 'Email Verified', 'default': False}, 'sub': {'anyOf': [{'type': 'string'}, {'type': 'null'}], 'title': 'Sub'}, 'given_name': {'type': 'string', 'title': 'Given Name'}, 'family_name': {'type': 'string', 'title': 'Family Name'}, 'middle_name': {'type': 'string', 'title': 'Middle Name'}, 'nickname': {'type': 'string', 'title': 'Nickname'}, 'date_of_birth': {'type': 'string', 'format': 'date', 'title': 'Date Of Birth'}, 'gender': {'$ref': '#/components/schemas/GenderEnum', 'default': 'unknown'}, 'picture': {'type': 'string', 'title': 'Picture'}, 'password': {'type': 'string', 'format': 'password', 'title': 'Password', 'writeOnly': True}, 'skills': {'items': {'$ref': '#/components/schemas/SkillsEnum'}, 'type': 'array', 'title': 'Skills', 'default': []}, 'uid': {'type': 'string', 'format': 'uuid', 'title': 'Uid'}, 'active': {'type': 'boolean', 'title': 'Active', 'default': True}, 'role': {'$ref': '#/components/schemas/Role'}, 'country': {'anyOf': [{'$ref': '#/components/schemas/Country'}, {'type': 'null'}]}, 'websites': {'items': {'$ref': '#/components/schemas/Website'}, 'type': 'array', 'title': 'Websites'}, 'emails': {'items': {'$ref': '#/components/schemas/Email'}, 'type': 'array', 'title': 'Emails'}, 'phone_numbers': {'items': {'$ref': '#/components/schemas/PhoneNumber'}, 'type': 'array', 'title': 'Phone Numbers'}, 'spoken_languages': {'items': {'$ref': '#/components/schemas/Language'}, 'type': 'array', 'title': 'Spoken Languages'}, 'tours': {'items': {'$ref': '#/components/schemas/TourWithoutAssignments'}, 'type': 'array', 'title': 'Tours'}, 'stops': {'items': {'$ref': '#/components/schemas/Stop'}, 'type': 'array', 'title': 'Stops'}}, 'type': 'object', 'required': ['uid', 'role', 'country', 'websites', 'emails', 'phone_numbers', 'spoken_languages', 'tours', 'stops'], 'title': 'Employee', 'description': 'Pydantic schema for get Employee.'}, 'EmployeeCreate': {'properties': {'websites': {'items': {'$ref': '#/components/schemas/Website'}, 'type': 'array', 'title': 'Websites', 'default': []}, 'emails': {'items': {'$ref': '#/components/schemas/Email'}, 'type': 'array', 'title': 'Emails', 'default': []}, 'phone_numbers': {'items': {'$ref': '#/components/schemas/PhoneNumber'}, 'type': 'array', 'title': 'Phone Numbers', 'default': []}, 'email': {'type': 'string', 'format': 'email', 'title': 'Email'}, 'email_verified': {'type': 'boolean', 'title': 'Email Verified', 'default': False}, 'sub': {'anyOf': [{'type': 'string'}, {'type': 'null'}], 'title': 'Sub'}, 'given_name': {'type': 'string', 'title': 'Given Name'}, 'family_name': {'type': 'string', 'title': 'Family Name'}, 'middle_name': {'type': 'string', 'title': 'Middle Name'}, 'nickname': {'type': 'string', 'title': 'Nickname'}, 'date_of_birth': {'type': 'string', 'format': 'date', 'title': 'Date Of Birth'}, 'gender': {'$ref': '#/components/schemas/GenderEnum', 'default': 'unknown'}, 'picture': {'type': 'string', 'title': 'Picture'}, 'password': {'type': 'string', 'format': 'password', 'title': 'Password', 'writeOnly': True}, 'skills': {'items': {'$ref': '#/components/schemas/SkillsEnum'}, 'type': 'array', 'title': 'Skills', 'default': []}, 'role': {'$ref': '#/components/schemas/RolesEnum', 'default': 'BASE'}, 'spoken_languages_codes': {'items': {'type': 'string'}, 'type': 'array', 'title': 'Spoken Languages Codes', 'default': []}}, 'type': 'object', 'title': 'EmployeeCreate', 'description': 'Pydantic schema for creation of Employee.'}, 'EmployeeORM': {'properties': {'email': {'type': 'string', 'format': 'email', 'title': 'Email'}, 'email_verified': {'type': 'boolean', 'title': 'Email Verified', 'default': False}, 'sub': {'anyOf': [{'type': 'string'}, {'type': 'null'}], 'title': 'Sub'}, 'given_name': {'type': 'string', 'title': 'Given Name'}, 'family_name': {'type': 'string', 'title': 'Family Name'}, 'middle_name': {'type': 'string', 'title': 'Middle Name'}, 'nickname': {'type': 'string', 'title': 'Nickname'}, 'date_of_birth': {'type': 'string', 'format': 'date', 'title': 'Date Of Birth'}, 'gender': {'$ref': '#/components/schemas/GenderEnum', 'default': 'unknown'}, 'picture': {'type': 'string', 'title': 'Picture'}, 'password': {'type': 'string', 'format': 'password', 'title': 'Password', 'writeOnly': True}, 'skills': {'items': {'$ref': '#/components/schemas/SkillsEnum'}, 'type': 'array', 'title': 'Skills', 'default': []}, 'uid': {'type': 'string', 'format': 'uuid', 'title': 'Uid'}, 'active': {'type': 'boolean', 'title': 'Active', 'default': True}, 'role': {'$ref': '#/components/schemas/Role'}, 'country': {'anyOf': [{'$ref': '#/components/schemas/Country'}, {'type': 'null'}]}, 'websites': {'items': {'$ref': '#/components/schemas/Website'}, 'type': 'array', 'title': 'Websites'}, 'emails': {'items': {'$ref': '#/components/schemas/Email'}, 'type': 'array', 'title': 'Emails'}, 'phone_numbers': {'items': {'$ref': '#/components/schemas/PhoneNumber'}, 'type': 'array', 'title': 'Phone Numbers'}, 'spoken_languages': {'items': {'$ref': '#/components/schemas/Language'}, 'type': 'array', 'title': 'Spoken Languages'}}, 'type': 'object', 'required': ['uid', 'role', 'country', 'websites', 'emails', 'phone_numbers', 'spoken_languages'], 'title': 'EmployeeORM', 'description': 'Pydantic schema for Employee ID.'}, 'EmployeeUpdate': {'properties': {'websites': {'items': {'$ref': '#/components/schemas/Website'}, 'type': 'array', 'title': 'Websites', 'default': []}, 'emails': {'items': {'$ref': '#/components/schemas/Email'}, 'type': 'array', 'title': 'Emails', 'default': []}, 'phone_numbers': {'items': {'$ref': '#/components/schemas/PhoneNumber'}, 'type': 'array', 'title': 'Phone Numbers', 'default': []}, 'email': {'type': 'string', 'format': 'email', 'title': 'Email'}, 'email_verified': {'type': 'boolean', 'title': 'Email Verified', 'default': False}, 'sub': {'anyOf': [{'type': 'string'}, {'type': 'null'}], 'title': 'Sub'}, 'given_name': {'type': 'string', 'title': 'Given Name'}, 'family_name': {'type': 'string', 'title': 'Family Name'}, 'middle_name': {'type': 'string', 'title': 'Middle Name'}, 'nickname': {'type': 'string', 'title': 'Nickname'}, 'date_of_birth': {'type': 'string', 'format': 'date', 'title': 'Date Of Birth'}, 'gender': {'$ref': '#/components/schemas/GenderEnum', 'default': 'unknown'}, 'picture': {'type': 'string', 'title': 'Picture'}, 'password': {'type': 'string', 'format': 'password', 'title': 'Password', 'writeOnly': True}, 'role_name': {'$ref': '#/components/schemas/RolesEnum', 'title': 'Role Name'}, 'refresh_token_uid': {'type': 'string', 'title': 'Refresh Token Uid'}, 'active': {'type': 'boolean', 'title': 'Active'}, 'spoken_languages': {'items': {'$ref': '#/components/schemas/Language'}, 'type': 'array', 'title': 'Spoken Languages', 'default': []}, 'skills': {'items': {'$ref': '#/components/schemas/SkillsEnum'}, 'type': 'array', 'title': 'Skills', 'default': []}}, 'type': 'object', 'title': 'EmployeeUpdate', 'description': 'Pydantic schema for updates on Employee.'}, 'EmployeesList': {'properties': {'employees': {'items': {'$ref': '#/components/schemas/Employee'}, 'type': 'array', 'title': 'Employees'}}, 'type': 'object', 'required': ['employees'], 'title': 'EmployeesList', 'description': 'Pydantic schema for list Employee.'}, 'GenderEnum': {'type': 'string', 'enum': ['male', 'female', 'other', 'unknown'], 'title': 'GenderEnum'}, 'HTTPValidationError': {'properties': {'detail': {'items': {'$ref': '#/components/schemas/ValidationError'}, 'type': 'array', 'title': 'Detail'}}, 'type': 'object', 'title': 'HTTPValidationError'}, 'Language': {'properties': {'name': {'type': 'string', 'title': 'Name'}, 'code': {'type': 'string', 'title': 'Code'}}, 'type': 'object', 'required': ['name', 'code'], 'title': 'Language', 'description': 'Pydantic schema for languages get requests.'}, 'Languages': {'properties': {'languages': {'items': {'$ref': '#/components/schemas/Language'}, 'type': 'array', 'title': 'Languages'}}, 'type': 'object', 'required': ['languages'], 'title': 'Languages', 'description': 'Pydantic schema for language list.'}, 'ListReservationFiltersEnum': {'type': 'string', 'enum': ['valid', 'canceled', 'completed', 'incomplete'], 'title': 'ListReservationFiltersEnum'}, 'Permission': {'properties': {'name': {'$ref': '#/components/schemas/PermissionsEnum'}}, 'type': 'object', 'required': ['name'], 'title': 'Permission'}, 'PermissionsEnum': {'type': 'string', 'enum': ['reservation.view', 'reservation.edit', 'reservationPrice.view', 'vehicle.view', 'vehicle.edit', 'vehicle.delete', 'vehicleStop.view', 'vehicleStop.edit', 'employee.view', 'employee.edit', 'employee.delete', 'employeeStop.view', 'employeeStop.edit', 'tourAgent.view', 'tourAgent.edit', 'tourAgent.delete', 'service.view', 'service.edit', 'service.delete', 'serviceType.view', 'serviceType.edit', 'serviceType.delete'], 'title': 'PermissionsEnum'}, 'PhoneNumber': {'properties': {'name': {'type': 'string', 'title': 'Name', 'default': 'default'}, 'value': {'type': 'string', 'title': 'Value'}}, 'type': 'object', 'title': 'PhoneNumber', 'description': 'Pydantic model for user phone numbers.'}, 'RefreshToken': {'properties': {'refresh_token': {'type': 'string', 'format': 'password', 'title': 'Refresh Token', 'writeOnly': True}}, 'type': 'object', 'required': ['refresh_token'], 'title': 'RefreshToken'}, 'Reservation': {'properties': {'name': {'type': 'string', 'title': 'Name'}, 'language': {'$ref': '#/components/schemas/Language'}, 'price_value': {'type': 'number', 'title': 'Price Value'}, 'price_currency': {'$ref': '#/components/schemas/CurrencyEnum', 'default': 'EUR'}, 'payment_info': {'type': 'string', 'title': 'Payment Info'}, 'paid': {'type': 'boolean', 'title': 'Paid', 'default': False}, 'note': {'type': 'string', 'title': 'Note'}, 'locked': {'type': 'boolean', 'title': 'Locked', 'default': False}, 'canceled': {'type': 'boolean', 'title': 'Canceled', 'default': False}, 'id': {'type': 'integer', 'title': 'Id'}, 'booking_number': {'type': 'integer', 'title': 'Booking Number'}, 'booking_serial': {'type': 'string', 'title': 'Booking Serial'}, 'year': {'type': 'integer', 'title': 'Year'}, 'tour_agent': {'$ref': '#/components/schemas/TourAgent', 'title': 'Tour Agent'}, 'created': {'type': 'string', 'format': 'date-time', 'title': 'Created'}, 'updated': {'type': 'string', 'format': 'date-time', 'title': 'Updated'}, 'tour_days': {'items': {'$ref': '#/components/schemas/TourDayWithoutReservation'}, 'type': 'array', 'title': 'Tour Days'}, 'participants': {'items': {'$ref': '#/components/schemas/Customer'}, 'type': 'array', 'title': 'Participants'}}, 'type': 'object', 'required': ['name', 'language', 'price_value', 'id', 'booking_number', 'booking_serial', 'year', 'created', 'tour_days', 'participants'], 'title': 'Reservation', 'description': 'Pydantic schema for get requests on reservations.'}, 'ReservationCreate': {'properties': {'name': {'type': 'string', 'title': 'Name'}, 'language': {'$ref': '#/components/schemas/Language'}, 'price_value': {'type': 'number', 'title': 'Price Value'}, 'price_currency': {'$ref': '#/components/schemas/CurrencyEnum', 'default': 'EUR'}, 'payment_info': {'type': 'string', 'title': 'Payment Info'}, 'paid': {'type': 'boolean', 'title': 'Paid', 'default': False}, 'note': {'type': 'string', 'title': 'Note'}, 'locked': {'type': 'boolean', 'title': 'Locked', 'default': False}, 'canceled': {'type': 'boolean', 'title': 'Canceled', 'default': False}, 'year': {'type': 'integer', 'title': 'Year'}, 'tour_days': {'items': {'$ref': '#/components/schemas/TourDayCreate'}, 'type': 'array', 'title': 'Tour Days'}, 'tour_agency_id': {'type': 'integer', 'title': 'Tour Agency Id'}, 'participants': {'items': {'$ref': '#/components/schemas/CustomerCreate'}, 'type': 'array', 'title': 'Participants'}}, 'type': 'object', 'required': ['name', 'language', 'price_value', 'year', 'tour_days', 'participants'], 'title': 'ReservationCreate', 'description': 'Pydantic schema for reservation creation'}, 'ReservationList': {'properties': {'reservations': {'items': {'$ref': '#/components/schemas/Reservation'}, 'type': 'array', 'title': 'Reservations'}}, 'type': 'object', 'required': ['reservations'], 'title': 'ReservationList'}, 'ReservationUpdate': {'properties': {'name': {'type': 'string', 'title': 'Name'}, 'tour_agent_id': {'type': 'integer', 'title': 'Tour Agent Id'}, 'people': {'items': {'$ref': '#/components/schemas/CustomerUpdate'}, 'type': 'array', 'title': 'People', 'default': []}, 'language_id': {'type': 'integer', 'title': 'Language Id'}, 'price_value': {'type': 'number', 'title': 'Price Value'}, 'price_currency': {'$ref': '#/components/schemas/CurrencyEnum', 'title': 'Price Currency'}, 'payment_info': {'type': 'string', 'title': 'Payment Info'}, 'payment_is_cash': {'type': 'boolean', 'title': 'Payment Is Cash'}, 'paid': {'type': 'boolean', 'title': 'Paid'}, 'note': {'type': 'string', 'title': 'Note'}, 'locked': {'type': 'boolean', 'title': 'Locked'}, 'canceled': {'type': 'boolean', 'title': 'Canceled'}}, 'type': 'object', 'title': 'ReservationUpdate', 'description': 'Pydantic schema for reservation update.'}, 'ReservationWithParticipants': {'properties': {'name': {'type': 'string', 'title': 'Name'}, 'language': {'$ref': '#/components/schemas/Language'}, 'price_value': {'type': 'number', 'title': 'Price Value'}, 'price_currency': {'$ref': '#/components/schemas/CurrencyEnum', 'default': 'EUR'}, 'payment_info': {'type': 'string', 'title': 'Payment Info'}, 'paid': {'type': 'boolean', 'title': 'Paid', 'default': False}, 'note': {'type': 'string', 'title': 'Note'}, 'locked': {'type': 'boolean', 'title': 'Locked', 'default': False}, 'canceled': {'type': 'boolean', 'title': 'Canceled', 'default': False}, 'id': {'type': 'integer', 'title': 'Id'}, 'booking_number': {'type': 'integer', 'title': 'Booking Number'}, 'booking_serial': {'type': 'string', 'title': 'Booking Serial'}, 'year': {'type': 'integer', 'title': 'Year'}, 'tour_agent': {'$ref': '#/components/schemas/TourAgent', 'title': 'Tour Agent'}, 'created': {'type': 'string', 'format': 'date-time', 'title': 'Created'}, 'updated': {'type': 'string', 'format': 'date-time', 'title': 'Updated'}, 'participants': {'items': {'$ref': '#/components/schemas/Customer'}, 'type': 'array', 'title': 'Participants'}}, 'type': 'object', 'required': ['name', 'language', 'price_value', 'id', 'booking_number', 'booking_serial', 'year', 'created', 'participants'], 'title': 'ReservationWithParticipants', 'description': 'Pydantic schema for reservation with related people.'}, 'Role': {'properties': {'name': {'$ref': '#/components/schemas/RolesEnum'}, 'permissions': {'items': {'$ref': '#/components/schemas/Permission'}, 'type': 'array', 'title': 'Permissions'}}, 'type': 'object', 'required': ['name', 'permissions'], 'title': 'Role'}, 'RolesEnum': {'type': 'string', 'enum': ['BASE', 'CUSTOMER', 'TOUR_AGENT', 'ASSIGNEE', 'BOOKING_OFFICER', 'MGMT', 'ADMIN'], 'title': 'RolesEnum'}, 'Service': {'properties': {'code': {'type': 'string', 'title': 'Code'}, 'name': {'type': 'string', 'title': 'Name'}, 'description': {'type': 'string', 'title': 'Description'}, 'duration': {'type': 'number', 'title': 'Duration'}, 'preferred_am_start_time': {'type': 'string', 'format': 'time', 'title': 'Preferred Am Start Time'}, 'preferred_pm_start_time': {'type': 'string', 'format': 'time', 'title': 'Preferred Pm Start Time'}, 'id': {'type': 'integer', 'title': 'Id'}, 'active': {'type': 'boolean', 'title': 'Active', 'default': True}, 'service_type': {'$ref': '#/components/schemas/ServiceTypeWithoutServices'}}, 'type': 'object', 'required': ['code', 'name', 'duration', 'id', 'service_type'], 'title': 'Service', 'description': 'Pydantic schema for services GET request.'}, 'ServiceCreate': {'properties': {'code': {'type': 'string', 'title': 'Code'}, 'name': {'type': 'string', 'title': 'Name'}, 'description': {'type': 'string', 'title': 'Description'}, 'duration': {'type': 'number', 'title': 'Duration'}, 'preferred_am_start_time': {'type': 'string', 'format': 'time', 'title': 'Preferred Am Start Time'}, 'preferred_pm_start_time': {'type': 'string', 'format': 'time', 'title': 'Preferred Pm Start Time'}, 'service_type_id': {'type': 'integer', 'title': 'Service Type Id'}}, 'type': 'object', 'required': ['code', 'name', 'duration', 'service_type_id'], 'title': 'ServiceCreate', 'description': 'Pydantic schema for service POST create request.'}, 'ServiceList': {'properties': {'services': {'items': {'$ref': '#/components/schemas/Service'}, 'type': 'array', 'title': 'Services'}}, 'type': 'object', 'required': ['services'], 'title': 'ServiceList', 'description': 'Pydantic schema for services GET list request.'}, 'ServiceType': {'properties': {'name': {'type': 'string', 'title': 'Name'}, 'description': {'type': 'string', 'title': 'Description'}, 'id': {'type': 'integer', 'title': 'Id'}, 'services': {'items': {'$ref': '#/components/schemas/ServiceWithoutServiceType'}, 'type': 'array', 'title': 'Services'}}, 'type': 'object', 'required': ['name', 'id', 'services'], 'title': 'ServiceType', 'description': 'Pydantic schema for service type GET request.'}, 'ServiceTypeCreate': {'properties': {'name': {'type': 'string', 'title': 'Name'}, 'description': {'type': 'string', 'title': 'Description'}}, 'type': 'object', 'required': ['name'], 'title': 'ServiceTypeCreate', 'description': 'Pydantic schema for service type POST create request.'}, 'ServiceTypeList': {'properties': {'service_types': {'items': {'$ref': '#/components/schemas/ServiceType'}, 'type': 'array', 'title': 'Service Types'}}, 'type': 'object', 'required': ['service_types'], 'title': 'ServiceTypeList', 'description': 'Pydantic schema for service type GET list request.'}, 'ServiceTypeUpdate': {'properties': {'name': {'type': 'string', 'title': 'Name'}, 'description': {'type': 'string', 'title': 'Description'}}, 'type': 'object', 'title': 'ServiceTypeUpdate', 'description': 'Pydantic schema for service type PATCH update request.'}, 'ServiceTypeWithoutServices': {'properties': {'name': {'type': 'string', 'title': 'Name'}, 'description': {'type': 'string', 'title': 'Description'}, 'id': {'type': 'integer', 'title': 'Id'}}, 'type': 'object', 'required': ['name', 'id'], 'title': 'ServiceTypeWithoutServices', 'description': 'Service type schema with no service relations.'}, 'ServiceUpdate': {'properties': {'code': {'type': 'string', 'title': 'Code'}, 'name': {'type': 'string', 'title': 'Name'}, 'description': {'type': 'string', 'title': 'Description'}, 'duration': {'type': 'number', 'title': 'Duration'}, 'preferred_am_start_time': {'type': 'string', 'format': 'time', 'title': 'Preferred Am Start Time'}, 'preferred_pm_start_time': {'type': 'string', 'format': 'time', 'title': 'Preferred Pm Start Time'}, 'active': {'type': 'boolean', 'title': 'Active'}}, 'type': 'object', 'title': 'ServiceUpdate', 'description': 'Pydantic schema for service PATCH update request.'}, 'ServiceWithoutServiceType': {'properties': {'code': {'type': 'string', 'title': 'Code'}, 'name': {'type': 'string', 'title': 'Name'}, 'description': {'type': 'string', 'title': 'Description'}, 'duration': {'type': 'number', 'title': 'Duration'}, 'preferred_am_start_time': {'type': 'string', 'format': 'time', 'title': 'Preferred Am Start Time'}, 'preferred_pm_start_time': {'type': 'string', 'format': 'time', 'title': 'Preferred Pm Start Time'}, 'id': {'type': 'integer', 'title': 'Id'}, 'active': {'type': 'boolean', 'title': 'Active', 'default': True}}, 'type': 'object', 'required': ['code', 'name', 'duration', 'id'], 'title': 'ServiceWithoutServiceType', 'description': 'Service schema without service type relation.'}, 'SkillsEnum': {'type': 'string', 'enum': ['booking_officer', 'local_guide', 'van_driver', 'driving_guide', 'in_house_guide', 'driver_only', 'trainee'], 'title': 'SkillsEnum'}, 'Stop': {'properties': {'type': {'$ref': '#/components/schemas/StopTypeEnum'}, 'start_datetime': {'type': 'string', 'format': 'date-time', 'title': 'Start Datetime'}, 'end_datetime': {'type': 'string', 'format': 'date-time', 'title': 'End Datetime'}, 'id': {'type': 'integer', 'title': 'Id'}, 'entity_id': {'type': 'string', 'title': 'Entity Id'}}, 'type': 'object', 'required': ['type', 'start_datetime', 'end_datetime', 'id', 'entity_id'], 'title': 'Stop', 'description': 'Pydantic schema for get cart stops requests.'}, 'StopCreate': {'properties': {'type': {'$ref': '#/components/schemas/StopTypeEnum'}, 'start_datetime': {'type': 'string', 'format': 'date-time', 'title': 'Start Datetime'}, 'end_datetime': {'type': 'string', 'format': 'date-time', 'title': 'End Datetime'}}, 'type': 'object', 'required': ['type', 'start_datetime', 'end_datetime'], 'title': 'StopCreate', 'description': 'Pydantic schema for creation of cart stops.'}, 'StopTypeEnum': {'type': 'string', 'enum': ['holiday', 'sick_leave', 'damage', 'detention'], 'title': 'StopTypeEnum'}, 'StopUpdate': {'properties': {'type': {'anyOf': [{'$ref': '#/components/schemas/StopTypeEnum'}, {'type': 'null'}]}, 'start_datetime': {'anyOf': [{'type': 'string', 'format': 'date-time'}, {'type': 'null'}], 'title': 'Start Datetime'}, 'end_datetime': {'anyOf': [{'type': 'string', 'format': 'date-time'}, {'type': 'null'}], 'title': 'End Datetime'}}, 'type': 'object', 'title': 'StopUpdate', 'description': 'Base pydantic driver stop update schema.'}, 'Token': {'properties': {'token': {'type': 'string', 'format': 'password', 'title': 'Token', 'writeOnly': True}}, 'type': 'object', 'required': ['token'], 'title': 'Token'}, 'TokenResponse': {'properties': {'token': {'type': 'string', 'title': 'Token'}, 'refresh_token': {'type': 'string', 'title': 'Refresh Token'}}, 'type': 'object', 'required': ['token', 'refresh_token'], 'title': 'TokenResponse'}, 'Tour': {'properties': {'start_time': {'type': 'string', 'format': 'time', 'title': 'Start Time'}, 'end_time': {'type': 'string', 'format': 'time', 'title': 'End Time'}, 'pickup': {'type': 'string', 'title': 'Pickup'}, 'dropoff': {'type': 'string', 'title': 'Dropoff'}, 'id': {'type': 'integer', 'title': 'Id'}, 'service': {'$ref': '#/components/schemas/Service'}, 'vehicles': {'items': {'$ref': '#/components/schemas/VehicleORM'}, 'type': 'array', 'title': 'Vehicles'}, 'drivers': {'items': {'$ref': '#/components/schemas/EmployeeORM'}, 'type': 'array', 'title': 'Drivers'}}, 'type': 'object', 'required': ['start_time', 'end_time', 'id', 'service', 'vehicles', 'drivers'], 'title': 'Tour', 'description': 'Pydantic schema for tour GET requests.'}, 'TourAgenciesList': {'properties': {'tour_agencies': {'items': {'$ref': '#/components/schemas/TourAgencyWithAgents'}, 'type': 'array', 'title': 'Tour Agencies'}}, 'type': 'object', 'required': ['tour_agencies'], 'title': 'TourAgenciesList'}, 'TourAgency': {'properties': {'name': {'type': 'string', 'title': 'Name'}, 'active': {'type': 'boolean', 'title': 'Active', 'default': True}, 'id': {'type': 'integer', 'title': 'Id'}}, 'type': 'object', 'required': ['name', 'id'], 'title': 'TourAgency'}, 'TourAgencyCreate': {'properties': {'name': {'type': 'string', 'title': 'Name'}, 'active': {'type': 'boolean', 'title': 'Active', 'default': True}}, 'type': 'object', 'required': ['name'], 'title': 'TourAgencyCreate'}, 'TourAgencyWithAgents': {'properties': {'name': {'type': 'string', 'title': 'Name'}, 'active': {'type': 'boolean', 'title': 'Active', 'default': True}, 'id': {'type': 'integer', 'title': 'Id'}, 'tour_agents': {'items': {'$ref': '#/components/schemas/User'}, 'type': 'array', 'title': 'Tour Agents'}}, 'type': 'object', 'required': ['name', 'id', 'tour_agents'], 'title': 'TourAgencyWithAgents'}, 'TourAgent': {'properties': {'email': {'type': 'string', 'format': 'email', 'title': 'Email'}, 'email_verified': {'type': 'boolean', 'title': 'Email Verified', 'default': False}, 'sub': {'anyOf': [{'type': 'string'}, {'type': 'null'}], 'title': 'Sub'}, 'given_name': {'type': 'string', 'title': 'Given Name'}, 'family_name': {'type': 'string', 'title': 'Family Name'}, 'middle_name': {'type': 'string', 'title': 'Middle Name'}, 'nickname': {'type': 'string', 'title': 'Nickname'}, 'date_of_birth': {'type': 'string', 'format': 'date', 'title': 'Date Of Birth'}, 'gender': {'$ref': '#/components/schemas/GenderEnum', 'default': 'unknown'}, 'picture': {'type': 'string', 'title': 'Picture'}, 'password': {'type': 'string', 'format': 'password', 'title': 'Password', 'writeOnly': True}, 'uid': {'type': 'string', 'format': 'uuid', 'title': 'Uid'}, 'active': {'type': 'boolean', 'title': 'Active', 'default': True}, 'role': {'$ref': '#/components/schemas/Role'}, 'country': {'anyOf': [{'$ref': '#/components/schemas/Country'}, {'type': 'null'}]}, 'websites': {'items': {'$ref': '#/components/schemas/Website'}, 'type': 'array', 'title': 'Websites'}, 'emails': {'items': {'$ref': '#/components/schemas/Email'}, 'type': 'array', 'title': 'Emails'}, 'phone_numbers': {'items': {'$ref': '#/components/schemas/PhoneNumber'}, 'type': 'array', 'title': 'Phone Numbers'}, 'tour_agency': {'$ref': '#/components/schemas/TourAgency'}, 'reservations': {'items': {'$ref': '#/components/schemas/Reservation'}, 'type': 'array', 'title': 'Reservations'}}, 'type': 'object', 'required': ['uid', 'role', 'country', 'websites', 'emails', 'phone_numbers', 'tour_agency', 'reservations'], 'title': 'TourAgent'}, 'TourAgentCreate': {'properties': {'websites': {'items': {'$ref': '#/components/schemas/Website'}, 'type': 'array', 'title': 'Websites', 'default': []}, 'emails': {'items': {'$ref': '#/components/schemas/Email'}, 'type': 'array', 'title': 'Emails', 'default': []}, 'phone_numbers': {'items': {'$ref': '#/components/schemas/PhoneNumber'}, 'type': 'array', 'title': 'Phone Numbers', 'default': []}, 'email': {'type': 'string', 'format': 'email', 'title': 'Email'}, 'email_verified': {'type': 'boolean', 'title': 'Email Verified', 'default': False}, 'sub': {'anyOf': [{'type': 'string'}, {'type': 'null'}], 'title': 'Sub'}, 'given_name': {'type': 'string', 'title': 'Given Name'}, 'family_name': {'type': 'string', 'title': 'Family Name'}, 'middle_name': {'type': 'string', 'title': 'Middle Name'}, 'nickname': {'type': 'string', 'title': 'Nickname'}, 'date_of_birth': {'type': 'string', 'format': 'date', 'title': 'Date Of Birth'}, 'gender': {'$ref': '#/components/schemas/GenderEnum', 'default': 'unknown'}, 'picture': {'type': 'string', 'title': 'Picture'}, 'password': {'type': 'string', 'format': 'password', 'title': 'Password', 'writeOnly': True}, 'tour_agency_id': {'type': 'integer', 'title': 'Tour Agency Id'}}, 'type': 'object', 'required': ['tour_agency_id'], 'title': 'TourAgentCreate', 'description': 'Pydantic schema for creation of agents.'}, 'TourAgentList': {'properties': {'tour_agents': {'items': {'$ref': '#/components/schemas/TourAgent'}, 'type': 'array', 'title': 'Tour Agents'}}, 'type': 'object', 'required': ['tour_agents'], 'title': 'TourAgentList', 'description': 'Pydantic schema for retrieving a list of agents.'}, 'TourAgentUpdate': {'properties': {'websites': {'items': {'$ref': '#/components/schemas/Website'}, 'type': 'array', 'title': 'Websites', 'default': []}, 'emails': {'items': {'$ref': '#/components/schemas/Email'}, 'type': 'array', 'title': 'Emails', 'default': []}, 'phone_numbers': {'items': {'$ref': '#/components/schemas/PhoneNumber'}, 'type': 'array', 'title': 'Phone Numbers', 'default': []}, 'email': {'type': 'string', 'format': 'email', 'title': 'Email'}, 'email_verified': {'type': 'boolean', 'title': 'Email Verified', 'default': False}, 'sub': {'anyOf': [{'type': 'string'}, {'type': 'null'}], 'title': 'Sub'}, 'given_name': {'type': 'string', 'title': 'Given Name'}, 'family_name': {'type': 'string', 'title': 'Family Name'}, 'middle_name': {'type': 'string', 'title': 'Middle Name'}, 'nickname': {'type': 'string', 'title': 'Nickname'}, 'date_of_birth': {'type': 'string', 'format': 'date', 'title': 'Date Of Birth'}, 'gender': {'$ref': '#/components/schemas/GenderEnum', 'default': 'unknown'}, 'picture': {'type': 'string', 'title': 'Picture'}, 'password': {'type': 'string', 'format': 'password', 'title': 'Password', 'writeOnly': True}, 'role_name': {'$ref': '#/components/schemas/RolesEnum', 'title': 'Role Name'}, 'refresh_token_uid': {'type': 'string', 'title': 'Refresh Token Uid'}, 'active': {'type': 'boolean', 'title': 'Active'}, 'tour_agency_id': {'type': 'integer', 'title': 'Tour Agency Id'}}, 'type': 'object', 'title': 'TourAgentUpdate'}, 'TourCreate': {'properties': {'start_time': {'type': 'string', 'format': 'time', 'title': 'Start Time'}, 'end_time': {'type': 'string', 'format': 'time', 'title': 'End Time'}, 'pickup': {'type': 'string', 'title': 'Pickup'}, 'dropoff': {'type': 'string', 'title': 'Dropoff'}, 'service_id': {'type': 'integer', 'title': 'Service Id'}}, 'type': 'object', 'required': ['start_time', 'end_time', 'service_id'], 'title': 'TourCreate', 'description': 'Pydantic schema for tour POST create requests.'}, 'TourDay': {'properties': {'tour_date': {'type': 'string', 'format': 'date', 'title': 'Tour Date'}, 'id': {'type': 'integer', 'title': 'Id'}, 'tours': {'items': {'$ref': '#/components/schemas/Tour'}, 'type': 'array', 'title': 'Tours'}, 'previous_day_id': {'type': 'integer', 'title': 'Previous Day Id'}, 'next_day_id': {'type': 'integer', 'title': 'Next Day Id'}, 'reservation': {'$ref': '#/components/schemas/ReservationWithParticipants'}}, 'type': 'object', 'required': ['tour_date', 'id', 'tours', 'reservation'], 'title': 'TourDay', 'description': 'Pydantic schema for tour day GET requests.'}, 'TourDayCreate': {'properties': {'tour_date': {'type': 'string', 'format': 'date', 'title': 'Tour Date'}, 'tours': {'items': {'$ref': '#/components/schemas/TourCreate'}, 'type': 'array', 'title': 'Tours'}}, 'type': 'object', 'required': ['tour_date', 'tours'], 'title': 'TourDayCreate', 'description': 'Pydantic schema for tour day POST create requests.'}, 'TourDayList': {'properties': {'tour_days': {'items': {'$ref': '#/components/schemas/TourDay'}, 'type': 'array', 'title': 'Tour Days'}}, 'type': 'object', 'required': ['tour_days'], 'title': 'TourDayList', 'description': 'Pydantic schema for tour day GET list requests.'}, 'TourDayUpdate': {'properties': {'reservation': {'$ref': '#/components/schemas/ReservationUpdate', 'title': 'Reservation'}, 'tour_date': {'type': 'string', 'format': 'date', 'title': 'Tour Date'}, 'tours': {'items': {'$ref': '#/components/schemas/TourUpdate'}, 'type': 'array', 'title': 'Tours'}}, 'type': 'object', 'required': ['tours'], 'title': 'TourDayUpdate', 'description': 'Pydantic schema for tour day update requests.'}, 'TourDayWithoutReservation': {'properties': {'tour_date': {'type': 'string', 'format': 'date', 'title': 'Tour Date'}, 'id': {'type': 'integer', 'title': 'Id'}, 'tours': {'items': {'$ref': '#/components/schemas/Tour'}, 'type': 'array', 'title': 'Tours'}, 'previous_day_id': {'type': 'integer', 'title': 'Previous Day Id'}, 'next_day_id': {'type': 'integer', 'title': 'Next Day Id'}}, 'type': 'object', 'required': ['tour_date', 'id', 'tours'], 'title': 'TourDayWithoutReservation', 'description': 'Tour day schema without reservation relation.'}, 'TourDaysCountByFilterSchema': {'properties': {'valid': {'type': 'integer', 'title': 'Valid'}, 'canceled': {'type': 'integer', 'title': 'Canceled'}, 'completed': {'type': 'integer', 'title': 'Completed'}, 'incomplete': {'type': 'integer', 'title': 'Incomplete'}}, 'type': 'object', 'required': ['valid', 'canceled', 'completed', 'incomplete'], 'title': 'TourDaysCountByFilterSchema', 'description': 'Pydantic schema for count-by-filter endpoint.'}, 'TourUpdate': {'properties': {'id': {'type': 'integer', 'title': 'Id'}, 'start_time': {'type': 'string', 'format': 'time', 'title': 'Start Time'}, 'end_time': {'type': 'string', 'format': 'time', 'title': 'End Time'}, 'service_id': {'type': 'integer', 'title': 'Service Id'}, 'vehicles_plates': {'items': {'type': 'string'}, 'type': 'array', 'title': 'Vehicles Plates', 'default': []}, 'drivers_uids': {'items': {'type': 'string', 'format': 'uuid'}, 'type': 'array', 'title': 'Drivers Uids', 'default': []}}, 'type': 'object', 'required': ['id'], 'title': 'TourUpdate', 'description': 'Pydantic schema for tour PATCH update requests.'}, 'TourWithoutAssignments': {'properties': {'start_time': {'type': 'string', 'format': 'time', 'title': 'Start Time'}, 'end_time': {'type': 'string', 'format': 'time', 'title': 'End Time'}, 'pickup': {'type': 'string', 'title': 'Pickup'}, 'dropoff': {'type': 'string', 'title': 'Dropoff'}, 'id': {'type': 'integer', 'title': 'Id'}, 'service': {'$ref': '#/components/schemas/Service'}}, 'type': 'object', 'required': ['start_time', 'end_time', 'id', 'service'], 'title': 'TourWithoutAssignments', 'description': 'Pydantic schema for tour without golf carts or drivers'}, 'User': {'properties': {'email': {'type': 'string', 'format': 'email', 'title': 'Email'}, 'email_verified': {'type': 'boolean', 'title': 'Email Verified', 'default': False}, 'sub': {'anyOf': [{'type': 'string'}, {'type': 'null'}], 'title': 'Sub'}, 'given_name': {'type': 'string', 'title': 'Given Name'}, 'family_name': {'type': 'string', 'title': 'Family Name'}, 'middle_name': {'type': 'string', 'title': 'Middle Name'}, 'nickname': {'type': 'string', 'title': 'Nickname'}, 'date_of_birth': {'type': 'string', 'format': 'date', 'title': 'Date Of Birth'}, 'gender': {'$ref': '#/components/schemas/GenderEnum', 'default': 'unknown'}, 'picture': {'type': 'string', 'title': 'Picture'}, 'password': {'type': 'string', 'format': 'password', 'title': 'Password', 'writeOnly': True}, 'uid': {'type': 'string', 'format': 'uuid', 'title': 'Uid'}, 'active': {'type': 'boolean', 'title': 'Active', 'default': True}, 'role': {'$ref': '#/components/schemas/Role'}, 'country': {'anyOf': [{'$ref': '#/components/schemas/Country'}, {'type': 'null'}]}, 'websites': {'items': {'$ref': '#/components/schemas/Website'}, 'type': 'array', 'title': 'Websites'}, 'emails': {'items': {'$ref': '#/components/schemas/Email'}, 'type': 'array', 'title': 'Emails'}, 'phone_numbers': {'items': {'$ref': '#/components/schemas/PhoneNumber'}, 'type': 'array', 'title': 'Phone Numbers'}}, 'type': 'object', 'required': ['uid', 'role', 'country', 'websites', 'emails', 'phone_numbers'], 'title': 'User'}, 'UserCreate': {'properties': {'websites': {'items': {'$ref': '#/components/schemas/Website'}, 'type': 'array', 'title': 'Websites', 'default': []}, 'emails': {'items': {'$ref': '#/components/schemas/Email'}, 'type': 'array', 'title': 'Emails', 'default': []}, 'phone_numbers': {'items': {'$ref': '#/components/schemas/PhoneNumber'}, 'type': 'array', 'title': 'Phone Numbers', 'default': []}, 'email': {'type': 'string', 'format': 'email', 'title': 'Email'}, 'email_verified': {'type': 'boolean', 'title': 'Email Verified', 'default': False}, 'sub': {'anyOf': [{'type': 'string'}, {'type': 'null'}], 'title': 'Sub'}, 'given_name': {'type': 'string', 'title': 'Given Name'}, 'family_name': {'type': 'string', 'title': 'Family Name'}, 'middle_name': {'type': 'string', 'title': 'Middle Name'}, 'nickname': {'type': 'string', 'title': 'Nickname'}, 'date_of_birth': {'type': 'string', 'format': 'date', 'title': 'Date Of Birth'}, 'gender': {'$ref': '#/components/schemas/GenderEnum', 'default': 'unknown'}, 'picture': {'type': 'string', 'title': 'Picture'}, 'password': {'type': 'string', 'format': 'password', 'title': 'Password', 'writeOnly': True}}, 'type': 'object', 'title': 'UserCreate', 'description': 'Pydantic schema for user create.'}, 'UserForToken': {'properties': {'email': {'type': 'string', 'format': 'email', 'title': 'Email'}, 'email_verified': {'type': 'boolean', 'title': 'Email Verified', 'default': False}, 'sub': {'anyOf': [{'type': 'string'}, {'type': 'null'}], 'title': 'Sub'}, 'given_name': {'type': 'string', 'title': 'Given Name'}, 'family_name': {'type': 'string', 'title': 'Family Name'}, 'middle_name': {'type': 'string', 'title': 'Middle Name'}, 'nickname': {'type': 'string', 'title': 'Nickname'}, 'date_of_birth': {'type': 'string', 'format': 'date', 'title': 'Date Of Birth'}, 'gender': {'$ref': '#/components/schemas/GenderEnum', 'default': 'unknown'}, 'picture': {'type': 'string', 'title': 'Picture'}, 'password': {'type': 'string', 'format': 'password', 'title': 'Password', 'writeOnly': True}, 'uid': {'type': 'string', 'format': 'uuid', 'title': 'Uid'}, 'active': {'type': 'boolean', 'title': 'Active', 'default': True}, 'role': {'$ref': '#/components/schemas/Role'}, 'country': {'anyOf': [{'$ref': '#/components/schemas/Country'}, {'type': 'null'}]}, 'websites': {'items': {'$ref': '#/components/schemas/Website'}, 'type': 'array', 'title': 'Websites'}, 'emails': {'items': {'$ref': '#/components/schemas/Email'}, 'type': 'array', 'title': 'Emails'}, 'phone_numbers': {'items': {'$ref': '#/components/schemas/PhoneNumber'}, 'type': 'array', 'title': 'Phone Numbers'}, 'refresh_token_uid': {'type': 'string', 'format': 'uuid', 'title': 'Refresh Token Uid'}}, 'type': 'object', 'required': ['uid', 'role', 'country', 'websites', 'emails', 'phone_numbers', 'refresh_token_uid'], 'title': 'UserForToken', 'description': 'Special schema for returning refresh_token_uid with User.'}, 'UserList': {'properties': {'users': {'items': {'$ref': '#/components/schemas/User'}, 'type': 'array', 'title': 'Users'}}, 'type': 'object', 'required': ['users'], 'title': 'UserList', 'description': 'Pydantic schema to list users.'}, 'UserWithTokens': {'properties': {'token': {'type': 'string', 'title': 'Token'}, 'refresh_token': {'type': 'string', 'title': 'Refresh Token'}, 'user': {'$ref': '#/components/schemas/UserForToken'}}, 'type': 'object', 'required': ['token', 'refresh_token', 'user'], 'title': 'UserWithTokens', 'description': 'Schema for login endpoints response'}, 'ValidationError': {'properties': {'loc': {'items': {'anyOf': [{'type': 'string'}, {'type': 'integer'}]}, 'type': 'array', 'title': 'Location'}, 'msg': {'type': 'string', 'title': 'Message'}, 'type': {'type': 'string', 'title': 'Error Type'}}, 'type': 'object', 'required': ['loc', 'msg', 'type'], 'title': 'ValidationError'}, 'Vehicle': {'properties': {'type': {'$ref': '#/components/schemas/VehicleTypesEnum', 'default': 'generic'}, 'brand': {'type': 'string', 'title': 'Brand'}, 'model': {'type': 'string', 'title': 'Model'}, 'seats': {'type': 'integer', 'title': 'Seats'}, 'picture': {'type': 'string', 'title': 'Picture'}, 'active': {'type': 'boolean', 'title': 'Active', 'default': True}, 'name': {'type': 'string', 'title': 'Name'}, 'plate': {'type': 'string', 'maxLength': 12, 'minLength': 7, 'title': 'Plate'}, 'battery': {'$ref': '#/components/schemas/Battery'}, 'tours': {'items': {'$ref': '#/components/schemas/Tour'}, 'type': 'array', 'title': 'Tours'}, 'stops': {'items': {'$ref': '#/components/schemas/Stop'}, 'type': 'array', 'title': 'Stops'}}, 'type': 'object', 'required': ['seats', 'plate', 'battery', 'tours', 'stops'], 'title': 'Vehicle', 'description': 'Pydantic schema for get vehicle.'}, 'VehicleCreate': {'properties': {'type': {'$ref': '#/components/schemas/VehicleTypesEnum', 'default': 'generic'}, 'brand': {'type': 'string', 'title': 'Brand'}, 'model': {'type': 'string', 'title': 'Model'}, 'seats': {'type': 'integer', 'maximum': 12.0, 'minimum': 1.0, 'title': 'Seats'}, 'picture': {'type': 'string', 'title': 'Picture'}, 'active': {'type': 'boolean', 'title': 'Active', 'default': True}, 'name': {'type': 'string', 'title': 'Name'}, 'plate': {'type': 'string', 'title': 'Plate'}, 'battery_id': {'type': 'integer', 'title': 'Battery Id'}}, 'type': 'object', 'required': ['seats', 'plate'], 'title': 'VehicleCreate'}, 'VehicleList': {'properties': {'vehicles': {'items': {'$ref': '#/components/schemas/Vehicle'}, 'type': 'array', 'title': 'Vehicles'}}, 'type': 'object', 'required': ['vehicles'], 'title': 'VehicleList'}, 'VehicleORM': {'properties': {'type': {'$ref': '#/components/schemas/VehicleTypesEnum', 'default': 'generic'}, 'brand': {'type': 'string', 'title': 'Brand'}, 'model': {'type': 'string', 'title': 'Model'}, 'seats': {'type': 'integer', 'title': 'Seats'}, 'picture': {'type': 'string', 'title': 'Picture'}, 'active': {'type': 'boolean', 'title': 'Active', 'default': True}, 'name': {'type': 'string', 'title': 'Name'}, 'plate': {'type': 'string', 'maxLength': 12, 'minLength': 7, 'title': 'Plate'}}, 'type': 'object', 'required': ['seats', 'plate'], 'title': 'VehicleORM'}, 'VehicleTypesEnum': {'type': 'string', 'enum': ['generic', 'van', 'golf_cart'], 'title': 'VehicleTypesEnum'}, 'VehicleUpdate': {'properties': {'battery_id': {'type': 'integer', 'title': 'Battery Id'}, 'picture': {'type': 'string', 'title': 'Picture'}, 'active': {'type': 'boolean', 'title': 'Active'}}, 'type': 'object', 'title': 'VehicleUpdate'}, 'Website': {'properties': {'name': {'type': 'string', 'title': 'Name', 'default': 'default'}, 'value': {'type': 'string', 'minLength': 1, 'format': 'uri', 'title': 'Value'}}, 'type': 'object', 'title': 'Website', 'description': 'Base pydantic model for user websites.'}}, 'securitySchemes': {'JWTBearer': {'type': 'http', 'scheme': 'bearer'}}}}
